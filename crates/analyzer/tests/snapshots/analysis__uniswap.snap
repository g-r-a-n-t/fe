---
source: crates/analyzer/tests/analysis.rs
expression: "build_snapshot(\"demos/uniswap.fe\", &src, module, &db)"

---
note: 
   ┌─ demos/uniswap.fe:12:5
   │
12 │     balances: Map<address, u256>
   │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Map<address, u256>

note: 
   ┌─ demos/uniswap.fe:13:5
   │
13 │     allowances: Map<address, Map<address, u256>>
   │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Map<address, Map<address, u256>>

note: 
   ┌─ demos/uniswap.fe:14:5
   │
14 │     total_supply: u256
   │     ^^^^^^^^^^^^^^^^^^ u256

note: 
   ┌─ demos/uniswap.fe:16:5
   │
16 │     nonces: Map<address, u256>
   │     ^^^^^^^^^^^^^^^^^^^^^^^^^^ Map<address, u256>

note: 
   ┌─ demos/uniswap.fe:18:5
   │
18 │     factory: address
   │     ^^^^^^^^^^^^^^^^ address

note: 
   ┌─ demos/uniswap.fe:19:5
   │
19 │     token0: address
   │     ^^^^^^^^^^^^^^^ address

note: 
   ┌─ demos/uniswap.fe:20:5
   │
20 │     token1: address
   │     ^^^^^^^^^^^^^^^ address

note: 
   ┌─ demos/uniswap.fe:22:5
   │
22 │     reserve0: u256
   │     ^^^^^^^^^^^^^^ u256

note: 
   ┌─ demos/uniswap.fe:23:5
   │
23 │     reserve1: u256
   │     ^^^^^^^^^^^^^^ u256

note: 
   ┌─ demos/uniswap.fe:24:5
   │
24 │     block_timestamp_last: u256
   │     ^^^^^^^^^^^^^^^^^^^^^^^^^^ u256

note: 
   ┌─ demos/uniswap.fe:26:5
   │
26 │     price0_cumulative_last: u256
   │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256

note: 
   ┌─ demos/uniswap.fe:27:5
   │
27 │     price1_cumulative_last: u256
   │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256

note: 
   ┌─ demos/uniswap.fe:28:5
   │
28 │     k_last: u256
   │     ^^^^^^^^^^^^ u256

note: 
    ┌─ demos/uniswap.fe:285:5
    │
285 │     fee_to: address
    │     ^^^^^^^^^^^^^^^ address

note: 
    ┌─ demos/uniswap.fe:286:5
    │
286 │     fee_to_setter: address
    │     ^^^^^^^^^^^^^^^^^^^^^^ address

note: 
    ┌─ demos/uniswap.fe:288:5
    │
288 │     pairs: Map<address, Map<address, address>>
    │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Map<address, Map<address, address>>

note: 
    ┌─ demos/uniswap.fe:290:5
    │
290 │     all_pairs: address[100]
    │     ^^^^^^^^^^^^^^^^^^^^^^^ address[100]

note: 
    ┌─ demos/uniswap.fe:291:5
    │
291 │     pair_counter: u256
    │     ^^^^^^^^^^^^^^^^^^ u256

note: 
   ┌─ demos/uniswap.fe:31:9
   │
31 │         idx owner: address
   │         ^^^^^^^^^^^^^^^^^^ address

note: 
   ┌─ demos/uniswap.fe:32:9
   │
32 │         idx spender: address
   │         ^^^^^^^^^^^^^^^^^^^^ address

note: 
   ┌─ demos/uniswap.fe:33:9
   │
33 │         value: u256
   │         ^^^^^^^^^^^ u256

note: 
   ┌─ demos/uniswap.fe:36:9
   │
36 │         idx from: address
   │         ^^^^^^^^^^^^^^^^^ address

note: 
   ┌─ demos/uniswap.fe:37:9
   │
37 │         idx to: address
   │         ^^^^^^^^^^^^^^^ address

note: 
   ┌─ demos/uniswap.fe:38:9
   │
38 │         value: u256
   │         ^^^^^^^^^^^ u256

note: 
   ┌─ demos/uniswap.fe:41:9
   │
41 │         idx sender: address
   │         ^^^^^^^^^^^^^^^^^^^ address

note: 
   ┌─ demos/uniswap.fe:42:9
   │
42 │         amount0: u256
   │         ^^^^^^^^^^^^^ u256

note: 
   ┌─ demos/uniswap.fe:43:9
   │
43 │         amount1: u256
   │         ^^^^^^^^^^^^^ u256

note: 
   ┌─ demos/uniswap.fe:46:9
   │
46 │         idx sender: address
   │         ^^^^^^^^^^^^^^^^^^^ address

note: 
   ┌─ demos/uniswap.fe:47:9
   │
47 │         amount0: u256
   │         ^^^^^^^^^^^^^ u256

note: 
   ┌─ demos/uniswap.fe:48:9
   │
48 │         amount1: u256
   │         ^^^^^^^^^^^^^ u256

note: 
   ┌─ demos/uniswap.fe:49:9
   │
49 │         idx to: address
   │         ^^^^^^^^^^^^^^^ address

note: 
   ┌─ demos/uniswap.fe:52:9
   │
52 │         idx sender: address
   │         ^^^^^^^^^^^^^^^^^^^ address

note: 
   ┌─ demos/uniswap.fe:53:9
   │
53 │         amount0_in: u256
   │         ^^^^^^^^^^^^^^^^ u256

note: 
   ┌─ demos/uniswap.fe:54:9
   │
54 │         amount1_in: u256
   │         ^^^^^^^^^^^^^^^^ u256

note: 
   ┌─ demos/uniswap.fe:55:9
   │
55 │         amount0_out: u256
   │         ^^^^^^^^^^^^^^^^^ u256

note: 
   ┌─ demos/uniswap.fe:56:9
   │
56 │         amount1_out: u256
   │         ^^^^^^^^^^^^^^^^^ u256

note: 
   ┌─ demos/uniswap.fe:57:9
   │
57 │         idx to: address
   │         ^^^^^^^^^^^^^^^ address

note: 
   ┌─ demos/uniswap.fe:60:9
   │
60 │         reserve0: u256
   │         ^^^^^^^^^^^^^^ u256

note: 
   ┌─ demos/uniswap.fe:61:9
   │
61 │         reserve1: u256
   │         ^^^^^^^^^^^^^^ u256

note: 
    ┌─ demos/uniswap.fe:294:9
    │
294 │         idx token0: address
    │         ^^^^^^^^^^^^^^^^^^^ address

note: 
    ┌─ demos/uniswap.fe:295:9
    │
295 │         idx token1: address
    │         ^^^^^^^^^^^^^^^^^^^ address

note: 
    ┌─ demos/uniswap.fe:296:9
    │
296 │         pair: address
    │         ^^^^^^^^^^^^^ address

note: 
    ┌─ demos/uniswap.fe:297:9
    │
297 │         index: u256
    │         ^^^^^^^^^^^ u256

note: 
  ┌─ demos/uniswap.fe:2:5
  │  
2 │ ╭     pub fn balanceOf(account: address) -> u256:
3 │ │         return 0
  │ ╰────────────────^ attributes hash: 2140140122946032557
  │  
  = FunctionSignature {
        self_decl: None,
        params: [
            FunctionParam {
                name: "account",
                typ: Ok(
                    Base(
                        Address,
                    ),
                ),
            },
        ],
        return_type: Ok(
            Base(
                Numeric(
                    U256,
                ),
            ),
        ),
    }

note: 
  ┌─ demos/uniswap.fe:5:5
  │  
5 │ ╭     pub fn transfer(recipient: address, amount: u256) -> bool:
6 │ │         return false
  │ ╰────────────────────^ attributes hash: 8296406261133122468
  │  
  = FunctionSignature {
        self_decl: None,
        params: [
            FunctionParam {
                name: "recipient",
                typ: Ok(
                    Base(
                        Address,
                    ),
                ),
            },
            FunctionParam {
                name: "amount",
                typ: Ok(
                    Base(
                        Numeric(
                            U256,
                        ),
                    ),
                ),
            },
        ],
        return_type: Ok(
            Base(
                Bool,
            ),
        ),
    }

note: 
   ┌─ demos/uniswap.fe:63:5
   │  
63 │ ╭     pub fn __init__(self):
64 │ │         self.factory = msg.sender
   │ ╰─────────────────────────────────^ attributes hash: 4369441865732737140
   │  
   = FunctionSignature {
         self_decl: Mutable,
         params: [],
         return_type: Ok(
             Base(
                 Unit,
             ),
         ),
     }

note: 
   ┌─ demos/uniswap.fe:66:5
   │  
66 │ ╭     pub fn factory(self) -> address:
67 │ │         return self.factory
   │ ╰───────────────────────────^ attributes hash: 17651916811868111914
   │  
   = FunctionSignature {
         self_decl: Mutable,
         params: [],
         return_type: Ok(
             Base(
                 Address,
             ),
         ),
     }

note: 
   ┌─ demos/uniswap.fe:69:5
   │  
69 │ ╭     pub fn token0(self) -> address:
70 │ │         return self.token0
   │ ╰──────────────────────────^ attributes hash: 17651916811868111914
   │  
   = FunctionSignature {
         self_decl: Mutable,
         params: [],
         return_type: Ok(
             Base(
                 Address,
             ),
         ),
     }

note: 
   ┌─ demos/uniswap.fe:72:5
   │  
72 │ ╭     pub fn token1(self) -> address:
73 │ │         return self.token1
   │ ╰──────────────────────────^ attributes hash: 17651916811868111914
   │  
   = FunctionSignature {
         self_decl: Mutable,
         params: [],
         return_type: Ok(
             Base(
                 Address,
             ),
         ),
     }

note: 
   ┌─ demos/uniswap.fe:75:5
   │  
75 │ ╭     fn _mint(self, to: address, value: u256):
76 │ │         self.total_supply = self.total_supply + value
77 │ │         self.balances[to] = self.balances[to] + value
78 │ │         emit Transfer(from=address(0), to, value)
   │ ╰─────────────────────────────────────────────────^ attributes hash: 1135367514371429330
   │  
   = FunctionSignature {
         self_decl: Mutable,
         params: [
             FunctionParam {
                 name: "to",
                 typ: Ok(
                     Base(
                         Address,
                     ),
                 ),
             },
             FunctionParam {
                 name: "value",
                 typ: Ok(
                     Base(
                         Numeric(
                             U256,
                         ),
                     ),
                 ),
             },
         ],
         return_type: Ok(
             Base(
                 Unit,
             ),
         ),
     }

note: 
   ┌─ demos/uniswap.fe:80:5
   │  
80 │ ╭     fn _burn(self, from: address, value: u256):
81 │ │         self.balances[from] = self.balances[from] - value
82 │ │         self.total_supply = self.total_supply - value
83 │ │         emit Transfer(from, to=address(0), value)
   │ ╰─────────────────────────────────────────────────^ attributes hash: 18052677761580718632
   │  
   = FunctionSignature {
         self_decl: Mutable,
         params: [
             FunctionParam {
                 name: "from",
                 typ: Ok(
                     Base(
                         Address,
                     ),
                 ),
             },
             FunctionParam {
                 name: "value",
                 typ: Ok(
                     Base(
                         Numeric(
                             U256,
                         ),
                     ),
                 ),
             },
         ],
         return_type: Ok(
             Base(
                 Unit,
             ),
         ),
     }

note: 
   ┌─ demos/uniswap.fe:85:5
   │  
85 │ ╭     fn _approve(self, owner: address, spender: address, value: u256):
86 │ │         self.allowances[owner][spender] = value
87 │ │         emit Approval(owner, spender, value)
   │ ╰────────────────────────────────────────────^ attributes hash: 2670276789438195364
   │  
   = FunctionSignature {
         self_decl: Mutable,
         params: [
             FunctionParam {
                 name: "owner",
                 typ: Ok(
                     Base(
                         Address,
                     ),
                 ),
             },
             FunctionParam {
                 name: "spender",
                 typ: Ok(
                     Base(
                         Address,
                     ),
                 ),
             },
             FunctionParam {
                 name: "value",
                 typ: Ok(
                     Base(
                         Numeric(
                             U256,
                         ),
                     ),
                 ),
             },
         ],
         return_type: Ok(
             Base(
                 Unit,
             ),
         ),
     }

note: 
   ┌─ demos/uniswap.fe:89:5
   │  
89 │ ╭     fn _transfer(self, from: address, to: address, value: u256):
90 │ │         self.balances[from] = self.balances[from] - value
91 │ │         self.balances[to] = self.balances[to] + value
92 │ │         emit Transfer(from, to, value)
   │ ╰──────────────────────────────────────^ attributes hash: 1279967340500149849
   │  
   = FunctionSignature {
         self_decl: Mutable,
         params: [
             FunctionParam {
                 name: "from",
                 typ: Ok(
                     Base(
                         Address,
                     ),
                 ),
             },
             FunctionParam {
                 name: "to",
                 typ: Ok(
                     Base(
                         Address,
                     ),
                 ),
             },
             FunctionParam {
                 name: "value",
                 typ: Ok(
                     Base(
                         Numeric(
                             U256,
                         ),
                     ),
                 ),
             },
         ],
         return_type: Ok(
             Base(
                 Unit,
             ),
         ),
     }

note: 
   ┌─ demos/uniswap.fe:94:5
   │  
94 │ ╭     pub fn approve(self, spender: address, value: u256) -> bool:
95 │ │         self._approve(msg.sender, spender, value)
96 │ │         return true
   │ ╰───────────────────^ attributes hash: 10662679418650794263
   │  
   = FunctionSignature {
         self_decl: Mutable,
         params: [
             FunctionParam {
                 name: "spender",
                 typ: Ok(
                     Base(
                         Address,
                     ),
                 ),
             },
             FunctionParam {
                 name: "value",
                 typ: Ok(
                     Base(
                         Numeric(
                             U256,
                         ),
                     ),
                 ),
             },
         ],
         return_type: Ok(
             Base(
                 Bool,
             ),
         ),
     }

note: 
    ┌─ demos/uniswap.fe:98:5
    │  
 98 │ ╭     pub fn transfer(self, to: address, value: u256) -> bool:
 99 │ │         self._transfer(msg.sender, to, value)
100 │ │         return true
    │ ╰───────────────────^ attributes hash: 3518107939221722675
    │  
    = FunctionSignature {
          self_decl: Mutable,
          params: [
              FunctionParam {
                  name: "to",
                  typ: Ok(
                      Base(
                          Address,
                      ),
                  ),
              },
              FunctionParam {
                  name: "value",
                  typ: Ok(
                      Base(
                          Numeric(
                              U256,
                          ),
                      ),
                  ),
              },
          ],
          return_type: Ok(
              Base(
                  Bool,
              ),
          ),
      }

note: 
    ┌─ demos/uniswap.fe:102:5
    │  
102 │ ╭     pub fn transferFrom(self, from: address, to: address, value: u256) -> bool:
103 │ │         assert self.allowances[from][msg.sender] >= value
104 │ │ 
105 │ │         self.allowances[from][msg.sender] = self.allowances[from][msg.sender] - value
106 │ │         self._transfer(from, to, value)
107 │ │         return true
    │ ╰───────────────────^ attributes hash: 8152647388321889889
    │  
    = FunctionSignature {
          self_decl: Mutable,
          params: [
              FunctionParam {
                  name: "from",
                  typ: Ok(
                      Base(
                          Address,
                      ),
                  ),
              },
              FunctionParam {
                  name: "to",
                  typ: Ok(
                      Base(
                          Address,
                      ),
                  ),
              },
              FunctionParam {
                  name: "value",
                  typ: Ok(
                      Base(
                          Numeric(
                              U256,
                          ),
                      ),
                  ),
              },
          ],
          return_type: Ok(
              Base(
                  Bool,
              ),
          ),
      }

note: 
    ┌─ demos/uniswap.fe:109:5
    │  
109 │ ╭     pub fn balanceOf(self, account: address) -> u256:
110 │ │         return self.balances[account]
    │ ╰─────────────────────────────────────^ attributes hash: 11484923544867751175
    │  
    = FunctionSignature {
          self_decl: Mutable,
          params: [
              FunctionParam {
                  name: "account",
                  typ: Ok(
                      Base(
                          Address,
                      ),
                  ),
              },
          ],
          return_type: Ok(
              Base(
                  Numeric(
                      U256,
                  ),
              ),
          ),
      }

note: 
    ┌─ demos/uniswap.fe:112:5
    │  
112 │ ╭     pub fn get_reserves(self) -> (u256, u256, u256):
113 │ │         return (self.reserve0, self.reserve1, self.block_timestamp_last)
    │ ╰────────────────────────────────────────────────────────────────────────^ attributes hash: 1362480321321505196
    │  
    = FunctionSignature {
          self_decl: Mutable,
          params: [],
          return_type: Ok(
              Tuple(
                  Tuple {
                      items: [
                          Base(
                              Numeric(
                                  U256,
                              ),
                          ),
                          Base(
                              Numeric(
                                  U256,
                              ),
                          ),
                          Base(
                              Numeric(
                                  U256,
                              ),
                          ),
                      ],
                  },
              ),
          ),
      }

note: 
    ┌─ demos/uniswap.fe:116:5
    │  
116 │ ╭     pub fn initialize(self, token0: address, token1: address):
117 │ │         assert msg.sender == self.factory, "UniswapV2: FORBIDDEN"
118 │ │         self.token0 = token0
119 │ │         self.token1 = token1
    │ ╰────────────────────────────^ attributes hash: 9762098062283689454
    │  
    = FunctionSignature {
          self_decl: Mutable,
          params: [
              FunctionParam {
                  name: "token0",
                  typ: Ok(
                      Base(
                          Address,
                      ),
                  ),
              },
              FunctionParam {
                  name: "token1",
                  typ: Ok(
                      Base(
                          Address,
                      ),
                  ),
              },
          ],
          return_type: Ok(
              Base(
                  Unit,
              ),
          ),
      }

note: 
    ┌─ demos/uniswap.fe:122:5
    │  
122 │ ╭     fn _update(self, balance0: u256, balance1: u256, reserve0: u256, reserve1: u256):
123 │ │         # changed from u32s
124 │ │         let block_timestamp: u256 = block.timestamp % 2**32
125 │ │         # TODO: reproduce desired overflow (https://github.com/ethereum/fe/issues/286)
    · │
134 │ │         self.block_timestamp_last = block_timestamp
135 │ │         emit Sync(reserve0=self.reserve0, reserve1=self.reserve1)
    │ ╰─────────────────────────────────────────────────────────────────^ attributes hash: 13082574297248451564
    │  
    = FunctionSignature {
          self_decl: Mutable,
          params: [
              FunctionParam {
                  name: "balance0",
                  typ: Ok(
                      Base(
                          Numeric(
                              U256,
                          ),
                      ),
                  ),
              },
              FunctionParam {
                  name: "balance1",
                  typ: Ok(
                      Base(
                          Numeric(
                              U256,
                          ),
                      ),
                  ),
              },
              FunctionParam {
                  name: "reserve0",
                  typ: Ok(
                      Base(
                          Numeric(
                              U256,
                          ),
                      ),
                  ),
              },
              FunctionParam {
                  name: "reserve1",
                  typ: Ok(
                      Base(
                          Numeric(
                              U256,
                          ),
                      ),
                  ),
              },
          ],
          return_type: Ok(
              Base(
                  Unit,
              ),
          ),
      }

note: 
    ┌─ demos/uniswap.fe:138:5
    │  
138 │ ╭     fn _mint_fee(self, reserve0: u256, reserve1: u256) -> bool:
139 │ │         let fee_to: address = UniswapV2Factory(self.factory).fee_to()
140 │ │         let fee_on: bool = fee_to != address(0)
141 │ │         let k_last: u256 = self.k_last # gas savings
    · │
154 │ │ 
155 │ │         return fee_on
    │ ╰─────────────────────^ attributes hash: 9365170424361356438
    │  
    = FunctionSignature {
          self_decl: Mutable,
          params: [
              FunctionParam {
                  name: "reserve0",
                  typ: Ok(
                      Base(
                          Numeric(
                              U256,
                          ),
                      ),
                  ),
              },
              FunctionParam {
                  name: "reserve1",
                  typ: Ok(
                      Base(
                          Numeric(
                              U256,
                          ),
                      ),
                  ),
              },
          ],
          return_type: Ok(
              Base(
                  Bool,
              ),
          ),
      }

note: 
    ┌─ demos/uniswap.fe:158:5
    │  
158 │ ╭     pub fn mint(self, to: address) -> u256:
159 │ │         let MINIMUM_LIQUIDITY: u256 = 1000
160 │ │         let reserve0: u256 = self.reserve0
161 │ │         let reserve1: u256 = self.reserve1
    · │
184 │ │         emit Mint(sender=msg.sender, amount0, amount1)
185 │ │         return liquidity
    │ ╰────────────────────────^ attributes hash: 13052412037608309076
    │  
    = FunctionSignature {
          self_decl: Mutable,
          params: [
              FunctionParam {
                  name: "to",
                  typ: Ok(
                      Base(
                          Address,
                      ),
                  ),
              },
          ],
          return_type: Ok(
              Base(
                  Numeric(
                      U256,
                  ),
              ),
          ),
      }

note: 
    ┌─ demos/uniswap.fe:188:5
    │  
188 │ ╭     pub fn burn(self, to: address) -> (u256, u256):
189 │ │         let reserve0: u256 = self.reserve0
190 │ │         let reserve1: u256 = self.reserve1
191 │ │         let token0: ERC20 = ERC20(self.token0)
    · │
213 │ │         emit Burn(sender=msg.sender, amount0, amount1, to)
214 │ │         return (amount0, amount1)
    │ ╰─────────────────────────────────^ attributes hash: 2656431017065792419
    │  
    = FunctionSignature {
          self_decl: Mutable,
          params: [
              FunctionParam {
                  name: "to",
                  typ: Ok(
                      Base(
                          Address,
                      ),
                  ),
              },
          ],
          return_type: Ok(
              Tuple(
                  Tuple {
                      items: [
                          Base(
                              Numeric(
                                  U256,
                              ),
                          ),
                          Base(
                              Numeric(
                                  U256,
                              ),
                          ),
                      ],
                  },
              ),
          ),
      }

note: 
    ┌─ demos/uniswap.fe:219:5
    │  
219 │ ╭     pub fn swap(self, amount0_out: u256, amount1_out: u256, to: address):
220 │ │         assert amount0_out > 0 or amount1_out > 0, "UniswapV2: INSUFFICIENT_OUTPUT_AMOUNT"
221 │ │         let reserve0: u256 = self.reserve0
222 │ │         let reserve1: u256 = self.reserve1
    · │
252 │ │         self._update(balance0, balance1, reserve0, reserve1)
253 │ │         emit Swap(sender=msg.sender, amount0_in, amount1_in, amount0_out, amount1_out, to)
    │ ╰──────────────────────────────────────────────────────────────────────────────────────────^ attributes hash: 13380171127738201451
    │  
    = FunctionSignature {
          self_decl: Mutable,
          params: [
              FunctionParam {
                  name: "amount0_out",
                  typ: Ok(
                      Base(
                          Numeric(
                              U256,
                          ),
                      ),
                  ),
              },
              FunctionParam {
                  name: "amount1_out",
                  typ: Ok(
                      Base(
                          Numeric(
                              U256,
                          ),
                      ),
                  ),
              },
              FunctionParam {
                  name: "to",
                  typ: Ok(
                      Base(
                          Address,
                      ),
                  ),
              },
          ],
          return_type: Ok(
              Base(
                  Unit,
              ),
          ),
      }

note: 
    ┌─ demos/uniswap.fe:256:5
    │  
256 │ ╭     pub fn skim(self, to: address):
257 │ │         let token0: ERC20 = ERC20(self.token0) # gas savings
258 │ │         let token1: ERC20 = ERC20(self.token1) # gas savings
259 │ │ 
260 │ │         token0.transfer(to, token0.balanceOf(self.address) - self.reserve0)
261 │ │         token1.transfer(to, token1.balanceOf(self.address) - self.reserve1)
    │ ╰───────────────────────────────────────────────────────────────────────────^ attributes hash: 2346286316485274384
    │  
    = FunctionSignature {
          self_decl: Mutable,
          params: [
              FunctionParam {
                  name: "to",
                  typ: Ok(
                      Base(
                          Address,
                      ),
                  ),
              },
          ],
          return_type: Ok(
              Base(
                  Unit,
              ),
          ),
      }

note: 
    ┌─ demos/uniswap.fe:264:5
    │  
264 │ ╭     pub fn sync(self):
265 │ │         let token0: ERC20 = ERC20(self.token0)
266 │ │         let token1: ERC20 = ERC20(self.token1)
267 │ │         self._update(token0.balanceOf(self.address), token1.balanceOf(self.address), self.reserve0, self.reserve1)
    │ ╰──────────────────────────────────────────────────────────────────────────────────────────────────────────────────^ attributes hash: 4369441865732737140
    │  
    = FunctionSignature {
          self_decl: Mutable,
          params: [],
          return_type: Ok(
              Base(
                  Unit,
              ),
          ),
      }

note: 
    ┌─ demos/uniswap.fe:269:5
    │  
269 │ ╭     fn sqrt(val: u256) -> u256:
270 │ │         let z: u256
271 │ │         if (val > 3):
272 │ │             z = val
    · │
278 │ │             z = 1
279 │ │         return z
    │ ╰────────────────^ attributes hash: 3075818098030342593
    │  
    = FunctionSignature {
          self_decl: None,
          params: [
              FunctionParam {
                  name: "val",
                  typ: Ok(
                      Base(
                          Numeric(
                              U256,
                          ),
                      ),
                  ),
              },
          ],
          return_type: Ok(
              Base(
                  Numeric(
                      U256,
                  ),
              ),
          ),
      }

note: 
    ┌─ demos/uniswap.fe:281:5
    │  
281 │ ╭     fn min(x: u256, y: u256) -> u256:
282 │ │         return x if x < y else y
    │ ╰────────────────────────────────^ attributes hash: 4022593831796629401
    │  
    = FunctionSignature {
          self_decl: None,
          params: [
              FunctionParam {
                  name: "x",
                  typ: Ok(
                      Base(
                          Numeric(
                              U256,
                          ),
                      ),
                  ),
              },
              FunctionParam {
                  name: "y",
                  typ: Ok(
                      Base(
                          Numeric(
                              U256,
                          ),
                      ),
                  ),
              },
          ],
          return_type: Ok(
              Base(
                  Numeric(
                      U256,
                  ),
              ),
          ),
      }

note: 
    ┌─ demos/uniswap.fe:299:5
    │  
299 │ ╭     pub fn __init__(self, fee_to_setter: address):
300 │ │        self.fee_to_setter = fee_to_setter
    │ ╰─────────────────────────────────────────^ attributes hash: 10732478853163688613
    │  
    = FunctionSignature {
          self_decl: Mutable,
          params: [
              FunctionParam {
                  name: "fee_to_setter",
                  typ: Ok(
                      Base(
                          Address,
                      ),
                  ),
              },
          ],
          return_type: Ok(
              Base(
                  Unit,
              ),
          ),
      }

note: 
    ┌─ demos/uniswap.fe:302:5
    │  
302 │ ╭     pub fn fee_to(self) -> address:
303 │ │         return self.fee_to
    │ ╰──────────────────────────^ attributes hash: 17651916811868111914
    │  
    = FunctionSignature {
          self_decl: Mutable,
          params: [],
          return_type: Ok(
              Base(
                  Address,
              ),
          ),
      }

note: 
    ┌─ demos/uniswap.fe:305:5
    │  
305 │ ╭     pub fn fee_to_setter(self) -> address:
306 │ │         return self.fee_to_setter
    │ ╰─────────────────────────────────^ attributes hash: 17651916811868111914
    │  
    = FunctionSignature {
          self_decl: Mutable,
          params: [],
          return_type: Ok(
              Base(
                  Address,
              ),
          ),
      }

note: 
    ┌─ demos/uniswap.fe:308:5
    │  
308 │ ╭     pub fn all_pairs_length(self) -> u256:
309 │ │         return self.pair_counter
    │ ╰────────────────────────────────^ attributes hash: 16482263331346774611
    │  
    = FunctionSignature {
          self_decl: Mutable,
          params: [],
          return_type: Ok(
              Base(
                  Numeric(
                      U256,
                  ),
              ),
          ),
      }

note: 
    ┌─ demos/uniswap.fe:311:5
    │  
311 │ ╭     pub fn create_pair(self, token_a: address, token_b: address) -> address:
312 │ │         assert token_a != token_b, "UniswapV2: IDENTICAL_ADDRESSES"
313 │ │ 
314 │ │         let token0: address = token_a if token_a < token_b else token_b
    · │
328 │ │         emit PairCreated(token0, token1, pair=address(pair), index=self.pair_counter)
329 │ │         return address(pair)
    │ ╰────────────────────────────^ attributes hash: 12932031939304465073
    │  
    = FunctionSignature {
          self_decl: Mutable,
          params: [
              FunctionParam {
                  name: "token_a",
                  typ: Ok(
                      Base(
                          Address,
                      ),
                  ),
              },
              FunctionParam {
                  name: "token_b",
                  typ: Ok(
                      Base(
                          Address,
                      ),
                  ),
              },
          ],
          return_type: Ok(
              Base(
                  Address,
              ),
          ),
      }

note: 
    ┌─ demos/uniswap.fe:331:5
    │  
331 │ ╭     pub fn set_fee_to(self, fee_to: address):
332 │ │         assert msg.sender == self.fee_to_setter, "UniswapV2: FORBIDDEN"
333 │ │         self.fee_to = fee_to
    │ ╰────────────────────────────^ attributes hash: 14618921052791880235
    │  
    = FunctionSignature {
          self_decl: Mutable,
          params: [
              FunctionParam {
                  name: "fee_to",
                  typ: Ok(
                      Base(
                          Address,
                      ),
                  ),
              },
          ],
          return_type: Ok(
              Base(
                  Unit,
              ),
          ),
      }

note: 
    ┌─ demos/uniswap.fe:335:5
    │  
335 │ ╭     pub fn set_fee_to_setter(self, fee_to_setter: address):
336 │ │         assert msg.sender == fee_to_setter, "UniswapV2: FORBIDDEN"
337 │ │         self.fee_to_setter = fee_to_setter
    │ ╰──────────────────────────────────────────^ attributes hash: 10732478853163688613
    │  
    = FunctionSignature {
          self_decl: Mutable,
          params: [
              FunctionParam {
                  name: "fee_to_setter",
                  typ: Ok(
                      Base(
                          Address,
                      ),
                  ),
              },
          ],
          return_type: Ok(
              Base(
                  Unit,
              ),
          ),
      }

note: 
  ┌─ demos/uniswap.fe:3:16
  │
3 │         return 0
  │                ^ u256: Value => None

note: 
  ┌─ demos/uniswap.fe:6:16
  │
6 │         return false
  │                ^^^^^ bool: Value => None

note: 
   ┌─ demos/uniswap.fe:64:9
   │
64 │         self.factory = msg.sender
   │         ^^^^^^^^^^^^ address: Storage { nonce: Some(4) } => None

note: 
   ┌─ demos/uniswap.fe:64:24
   │
64 │         self.factory = msg.sender
   │                        ^^^^^^^^^^ address: Value => None

note: 
   ┌─ demos/uniswap.fe:67:16
   │
67 │         return self.factory
   │                ^^^^^^^^^^^^ address: Storage { nonce: Some(4) } => Some(Value)

note: 
   ┌─ demos/uniswap.fe:70:16
   │
70 │         return self.token0
   │                ^^^^^^^^^^^ address: Storage { nonce: Some(5) } => Some(Value)

note: 
   ┌─ demos/uniswap.fe:73:16
   │
73 │         return self.token1
   │                ^^^^^^^^^^^ address: Storage { nonce: Some(6) } => Some(Value)

note: 
   ┌─ demos/uniswap.fe:76:9
   │
76 │         self.total_supply = self.total_supply + value
   │         ^^^^^^^^^^^^^^^^^ u256: Storage { nonce: Some(2) } => None

note: 
   ┌─ demos/uniswap.fe:76:29
   │
76 │         self.total_supply = self.total_supply + value
   │                             ^^^^^^^^^^^^^^^^^ u256: Storage { nonce: Some(2) } => Some(Value)

note: 
   ┌─ demos/uniswap.fe:76:49
   │
76 │         self.total_supply = self.total_supply + value
   │                                                 ^^^^^ u256: Value => None

note: 
   ┌─ demos/uniswap.fe:76:29
   │
76 │         self.total_supply = self.total_supply + value
   │                             ^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value => None

note: 
   ┌─ demos/uniswap.fe:77:9
   │
77 │         self.balances[to] = self.balances[to] + value
   │         ^^^^^^^^^^^^^ Map<address, u256>: Storage { nonce: Some(0) } => None

note: 
   ┌─ demos/uniswap.fe:77:23
   │
77 │         self.balances[to] = self.balances[to] + value
   │                       ^^ address: Value => None

note: 
   ┌─ demos/uniswap.fe:77:9
   │
77 │         self.balances[to] = self.balances[to] + value
   │         ^^^^^^^^^^^^^^^^^ u256: Storage { nonce: None } => None

note: 
   ┌─ demos/uniswap.fe:77:29
   │
77 │         self.balances[to] = self.balances[to] + value
   │                             ^^^^^^^^^^^^^ Map<address, u256>: Storage { nonce: Some(0) } => None

note: 
   ┌─ demos/uniswap.fe:77:43
   │
77 │         self.balances[to] = self.balances[to] + value
   │                                           ^^ address: Value => None

note: 
   ┌─ demos/uniswap.fe:77:29
   │
77 │         self.balances[to] = self.balances[to] + value
   │                             ^^^^^^^^^^^^^^^^^ u256: Storage { nonce: None } => Some(Value)

note: 
   ┌─ demos/uniswap.fe:77:49
   │
77 │         self.balances[to] = self.balances[to] + value
   │                                                 ^^^^^ u256: Value => None

note: 
   ┌─ demos/uniswap.fe:77:29
   │
77 │         self.balances[to] = self.balances[to] + value
   │                             ^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value => None

note: 
   ┌─ demos/uniswap.fe:78:36
   │
78 │         emit Transfer(from=address(0), to, value)
   │                                    ^ u256: Value => None

note: 
   ┌─ demos/uniswap.fe:78:28
   │
78 │         emit Transfer(from=address(0), to, value)
   │                            ^^^^^^^^^^ address: Value => None

note: 
   ┌─ demos/uniswap.fe:78:40
   │
78 │         emit Transfer(from=address(0), to, value)
   │                                        ^^ address: Value => None

note: 
   ┌─ demos/uniswap.fe:78:44
   │
78 │         emit Transfer(from=address(0), to, value)
   │                                            ^^^^^ u256: Value => None

note: 
   ┌─ demos/uniswap.fe:81:9
   │
81 │         self.balances[from] = self.balances[from] - value
   │         ^^^^^^^^^^^^^ Map<address, u256>: Storage { nonce: Some(0) } => None

note: 
   ┌─ demos/uniswap.fe:81:23
   │
81 │         self.balances[from] = self.balances[from] - value
   │                       ^^^^ address: Value => None

note: 
   ┌─ demos/uniswap.fe:81:9
   │
81 │         self.balances[from] = self.balances[from] - value
   │         ^^^^^^^^^^^^^^^^^^^ u256: Storage { nonce: None } => None

note: 
   ┌─ demos/uniswap.fe:81:31
   │
81 │         self.balances[from] = self.balances[from] - value
   │                               ^^^^^^^^^^^^^ Map<address, u256>: Storage { nonce: Some(0) } => None

note: 
   ┌─ demos/uniswap.fe:81:45
   │
81 │         self.balances[from] = self.balances[from] - value
   │                                             ^^^^ address: Value => None

note: 
   ┌─ demos/uniswap.fe:81:31
   │
81 │         self.balances[from] = self.balances[from] - value
   │                               ^^^^^^^^^^^^^^^^^^^ u256: Storage { nonce: None } => Some(Value)

note: 
   ┌─ demos/uniswap.fe:81:53
   │
81 │         self.balances[from] = self.balances[from] - value
   │                                                     ^^^^^ u256: Value => None

note: 
   ┌─ demos/uniswap.fe:81:31
   │
81 │         self.balances[from] = self.balances[from] - value
   │                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value => None

note: 
   ┌─ demos/uniswap.fe:82:9
   │
82 │         self.total_supply = self.total_supply - value
   │         ^^^^^^^^^^^^^^^^^ u256: Storage { nonce: Some(2) } => None

note: 
   ┌─ demos/uniswap.fe:82:29
   │
82 │         self.total_supply = self.total_supply - value
   │                             ^^^^^^^^^^^^^^^^^ u256: Storage { nonce: Some(2) } => Some(Value)

note: 
   ┌─ demos/uniswap.fe:82:49
   │
82 │         self.total_supply = self.total_supply - value
   │                                                 ^^^^^ u256: Value => None

note: 
   ┌─ demos/uniswap.fe:82:29
   │
82 │         self.total_supply = self.total_supply - value
   │                             ^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value => None

note: 
   ┌─ demos/uniswap.fe:83:23
   │
83 │         emit Transfer(from, to=address(0), value)
   │                       ^^^^ address: Value => None

note: 
   ┌─ demos/uniswap.fe:83:40
   │
83 │         emit Transfer(from, to=address(0), value)
   │                                        ^ u256: Value => None

note: 
   ┌─ demos/uniswap.fe:83:32
   │
83 │         emit Transfer(from, to=address(0), value)
   │                                ^^^^^^^^^^ address: Value => None

note: 
   ┌─ demos/uniswap.fe:83:44
   │
83 │         emit Transfer(from, to=address(0), value)
   │                                            ^^^^^ u256: Value => None

note: 
   ┌─ demos/uniswap.fe:86:9
   │
86 │         self.allowances[owner][spender] = value
   │         ^^^^^^^^^^^^^^^ Map<address, Map<address, u256>>: Storage { nonce: Some(1) } => None

note: 
   ┌─ demos/uniswap.fe:86:25
   │
86 │         self.allowances[owner][spender] = value
   │                         ^^^^^ address: Value => None

note: 
   ┌─ demos/uniswap.fe:86:9
   │
86 │         self.allowances[owner][spender] = value
   │         ^^^^^^^^^^^^^^^^^^^^^^ Map<address, u256>: Storage { nonce: None } => None

note: 
   ┌─ demos/uniswap.fe:86:32
   │
86 │         self.allowances[owner][spender] = value
   │                                ^^^^^^^ address: Value => None

note: 
   ┌─ demos/uniswap.fe:86:9
   │
86 │         self.allowances[owner][spender] = value
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Storage { nonce: None } => None

note: 
   ┌─ demos/uniswap.fe:86:43
   │
86 │         self.allowances[owner][spender] = value
   │                                           ^^^^^ u256: Value => None

note: 
   ┌─ demos/uniswap.fe:87:23
   │
87 │         emit Approval(owner, spender, value)
   │                       ^^^^^ address: Value => None

note: 
   ┌─ demos/uniswap.fe:87:30
   │
87 │         emit Approval(owner, spender, value)
   │                              ^^^^^^^ address: Value => None

note: 
   ┌─ demos/uniswap.fe:87:39
   │
87 │         emit Approval(owner, spender, value)
   │                                       ^^^^^ u256: Value => None

note: 
   ┌─ demos/uniswap.fe:90:9
   │
90 │         self.balances[from] = self.balances[from] - value
   │         ^^^^^^^^^^^^^ Map<address, u256>: Storage { nonce: Some(0) } => None

note: 
   ┌─ demos/uniswap.fe:90:23
   │
90 │         self.balances[from] = self.balances[from] - value
   │                       ^^^^ address: Value => None

note: 
   ┌─ demos/uniswap.fe:90:9
   │
90 │         self.balances[from] = self.balances[from] - value
   │         ^^^^^^^^^^^^^^^^^^^ u256: Storage { nonce: None } => None

note: 
   ┌─ demos/uniswap.fe:90:31
   │
90 │         self.balances[from] = self.balances[from] - value
   │                               ^^^^^^^^^^^^^ Map<address, u256>: Storage { nonce: Some(0) } => None

note: 
   ┌─ demos/uniswap.fe:90:45
   │
90 │         self.balances[from] = self.balances[from] - value
   │                                             ^^^^ address: Value => None

note: 
   ┌─ demos/uniswap.fe:90:31
   │
90 │         self.balances[from] = self.balances[from] - value
   │                               ^^^^^^^^^^^^^^^^^^^ u256: Storage { nonce: None } => Some(Value)

note: 
   ┌─ demos/uniswap.fe:90:53
   │
90 │         self.balances[from] = self.balances[from] - value
   │                                                     ^^^^^ u256: Value => None

note: 
   ┌─ demos/uniswap.fe:90:31
   │
90 │         self.balances[from] = self.balances[from] - value
   │                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value => None

note: 
   ┌─ demos/uniswap.fe:91:9
   │
91 │         self.balances[to] = self.balances[to] + value
   │         ^^^^^^^^^^^^^ Map<address, u256>: Storage { nonce: Some(0) } => None

note: 
   ┌─ demos/uniswap.fe:91:23
   │
91 │         self.balances[to] = self.balances[to] + value
   │                       ^^ address: Value => None

note: 
   ┌─ demos/uniswap.fe:91:9
   │
91 │         self.balances[to] = self.balances[to] + value
   │         ^^^^^^^^^^^^^^^^^ u256: Storage { nonce: None } => None

note: 
   ┌─ demos/uniswap.fe:91:29
   │
91 │         self.balances[to] = self.balances[to] + value
   │                             ^^^^^^^^^^^^^ Map<address, u256>: Storage { nonce: Some(0) } => None

note: 
   ┌─ demos/uniswap.fe:91:43
   │
91 │         self.balances[to] = self.balances[to] + value
   │                                           ^^ address: Value => None

note: 
   ┌─ demos/uniswap.fe:91:29
   │
91 │         self.balances[to] = self.balances[to] + value
   │                             ^^^^^^^^^^^^^^^^^ u256: Storage { nonce: None } => Some(Value)

note: 
   ┌─ demos/uniswap.fe:91:49
   │
91 │         self.balances[to] = self.balances[to] + value
   │                                                 ^^^^^ u256: Value => None

note: 
   ┌─ demos/uniswap.fe:91:29
   │
91 │         self.balances[to] = self.balances[to] + value
   │                             ^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value => None

note: 
   ┌─ demos/uniswap.fe:92:23
   │
92 │         emit Transfer(from, to, value)
   │                       ^^^^ address: Value => None

note: 
   ┌─ demos/uniswap.fe:92:29
   │
92 │         emit Transfer(from, to, value)
   │                             ^^ address: Value => None

note: 
   ┌─ demos/uniswap.fe:92:33
   │
92 │         emit Transfer(from, to, value)
   │                                 ^^^^^ u256: Value => None

note: 
   ┌─ demos/uniswap.fe:95:23
   │
95 │         self._approve(msg.sender, spender, value)
   │                       ^^^^^^^^^^ address: Value => None

note: 
   ┌─ demos/uniswap.fe:95:35
   │
95 │         self._approve(msg.sender, spender, value)
   │                                   ^^^^^^^ address: Value => None

note: 
   ┌─ demos/uniswap.fe:95:44
   │
95 │         self._approve(msg.sender, spender, value)
   │                                            ^^^^^ u256: Value => None

note: 
   ┌─ demos/uniswap.fe:95:9
   │
95 │         self._approve(msg.sender, spender, value)
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (): Value => None

note: 
   ┌─ demos/uniswap.fe:96:16
   │
96 │         return true
   │                ^^^^ bool: Value => None

note: 
   ┌─ demos/uniswap.fe:99:24
   │
99 │         self._transfer(msg.sender, to, value)
   │                        ^^^^^^^^^^ address: Value => None

note: 
   ┌─ demos/uniswap.fe:99:36
   │
99 │         self._transfer(msg.sender, to, value)
   │                                    ^^ address: Value => None

note: 
   ┌─ demos/uniswap.fe:99:40
   │
99 │         self._transfer(msg.sender, to, value)
   │                                        ^^^^^ u256: Value => None

note: 
   ┌─ demos/uniswap.fe:99:9
   │
99 │         self._transfer(msg.sender, to, value)
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (): Value => None

note: 
    ┌─ demos/uniswap.fe:100:16
    │
100 │         return true
    │                ^^^^ bool: Value => None

note: 
    ┌─ demos/uniswap.fe:103:16
    │
103 │         assert self.allowances[from][msg.sender] >= value
    │                ^^^^^^^^^^^^^^^ Map<address, Map<address, u256>>: Storage { nonce: Some(1) } => None

note: 
    ┌─ demos/uniswap.fe:103:32
    │
103 │         assert self.allowances[from][msg.sender] >= value
    │                                ^^^^ address: Value => None

note: 
    ┌─ demos/uniswap.fe:103:16
    │
103 │         assert self.allowances[from][msg.sender] >= value
    │                ^^^^^^^^^^^^^^^^^^^^^ Map<address, u256>: Storage { nonce: None } => None

note: 
    ┌─ demos/uniswap.fe:103:38
    │
103 │         assert self.allowances[from][msg.sender] >= value
    │                                      ^^^^^^^^^^ address: Value => None

note: 
    ┌─ demos/uniswap.fe:103:16
    │
103 │         assert self.allowances[from][msg.sender] >= value
    │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Storage { nonce: None } => Some(Value)

note: 
    ┌─ demos/uniswap.fe:103:53
    │
103 │         assert self.allowances[from][msg.sender] >= value
    │                                                     ^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:103:16
    │
103 │         assert self.allowances[from][msg.sender] >= value
    │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value => None

note: 
    ┌─ demos/uniswap.fe:105:9
    │
105 │         self.allowances[from][msg.sender] = self.allowances[from][msg.sender] - value
    │         ^^^^^^^^^^^^^^^ Map<address, Map<address, u256>>: Storage { nonce: Some(1) } => None

note: 
    ┌─ demos/uniswap.fe:105:25
    │
105 │         self.allowances[from][msg.sender] = self.allowances[from][msg.sender] - value
    │                         ^^^^ address: Value => None

note: 
    ┌─ demos/uniswap.fe:105:9
    │
105 │         self.allowances[from][msg.sender] = self.allowances[from][msg.sender] - value
    │         ^^^^^^^^^^^^^^^^^^^^^ Map<address, u256>: Storage { nonce: None } => None

note: 
    ┌─ demos/uniswap.fe:105:31
    │
105 │         self.allowances[from][msg.sender] = self.allowances[from][msg.sender] - value
    │                               ^^^^^^^^^^ address: Value => None

note: 
    ┌─ demos/uniswap.fe:105:9
    │
105 │         self.allowances[from][msg.sender] = self.allowances[from][msg.sender] - value
    │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Storage { nonce: None } => None

note: 
    ┌─ demos/uniswap.fe:105:45
    │
105 │         self.allowances[from][msg.sender] = self.allowances[from][msg.sender] - value
    │                                             ^^^^^^^^^^^^^^^ Map<address, Map<address, u256>>: Storage { nonce: Some(1) } => None

note: 
    ┌─ demos/uniswap.fe:105:61
    │
105 │         self.allowances[from][msg.sender] = self.allowances[from][msg.sender] - value
    │                                                             ^^^^ address: Value => None

note: 
    ┌─ demos/uniswap.fe:105:45
    │
105 │         self.allowances[from][msg.sender] = self.allowances[from][msg.sender] - value
    │                                             ^^^^^^^^^^^^^^^^^^^^^ Map<address, u256>: Storage { nonce: None } => None

note: 
    ┌─ demos/uniswap.fe:105:67
    │
105 │         self.allowances[from][msg.sender] = self.allowances[from][msg.sender] - value
    │                                                                   ^^^^^^^^^^ address: Value => None

note: 
    ┌─ demos/uniswap.fe:105:45
    │
105 │         self.allowances[from][msg.sender] = self.allowances[from][msg.sender] - value
    │                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Storage { nonce: None } => Some(Value)

note: 
    ┌─ demos/uniswap.fe:105:81
    │
105 │         self.allowances[from][msg.sender] = self.allowances[from][msg.sender] - value
    │                                                                                 ^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:105:45
    │
105 │         self.allowances[from][msg.sender] = self.allowances[from][msg.sender] - value
    │                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:106:24
    │
106 │         self._transfer(from, to, value)
    │                        ^^^^ address: Value => None

note: 
    ┌─ demos/uniswap.fe:106:30
    │
106 │         self._transfer(from, to, value)
    │                              ^^ address: Value => None

note: 
    ┌─ demos/uniswap.fe:106:34
    │
106 │         self._transfer(from, to, value)
    │                                  ^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:106:9
    │
106 │         self._transfer(from, to, value)
    │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (): Value => None

note: 
    ┌─ demos/uniswap.fe:107:16
    │
107 │         return true
    │                ^^^^ bool: Value => None

note: 
    ┌─ demos/uniswap.fe:110:16
    │
110 │         return self.balances[account]
    │                ^^^^^^^^^^^^^ Map<address, u256>: Storage { nonce: Some(0) } => None

note: 
    ┌─ demos/uniswap.fe:110:30
    │
110 │         return self.balances[account]
    │                              ^^^^^^^ address: Value => None

note: 
    ┌─ demos/uniswap.fe:110:16
    │
110 │         return self.balances[account]
    │                ^^^^^^^^^^^^^^^^^^^^^^ u256: Storage { nonce: None } => Some(Value)

note: 
    ┌─ demos/uniswap.fe:113:17
    │
113 │         return (self.reserve0, self.reserve1, self.block_timestamp_last)
    │                 ^^^^^^^^^^^^^ u256: Storage { nonce: Some(7) } => Some(Value)

note: 
    ┌─ demos/uniswap.fe:113:32
    │
113 │         return (self.reserve0, self.reserve1, self.block_timestamp_last)
    │                                ^^^^^^^^^^^^^ u256: Storage { nonce: Some(8) } => Some(Value)

note: 
    ┌─ demos/uniswap.fe:113:47
    │
113 │         return (self.reserve0, self.reserve1, self.block_timestamp_last)
    │                                               ^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Storage { nonce: Some(9) } => Some(Value)

note: 
    ┌─ demos/uniswap.fe:113:16
    │
113 │         return (self.reserve0, self.reserve1, self.block_timestamp_last)
    │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (u256, u256, u256): Memory => None

note: 
    ┌─ demos/uniswap.fe:117:16
    │
117 │         assert msg.sender == self.factory, "UniswapV2: FORBIDDEN"
    │                ^^^^^^^^^^ address: Value => None

note: 
    ┌─ demos/uniswap.fe:117:30
    │
117 │         assert msg.sender == self.factory, "UniswapV2: FORBIDDEN"
    │                              ^^^^^^^^^^^^ address: Storage { nonce: Some(4) } => Some(Value)

note: 
    ┌─ demos/uniswap.fe:117:16
    │
117 │         assert msg.sender == self.factory, "UniswapV2: FORBIDDEN"
    │                ^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value => None

note: 
    ┌─ demos/uniswap.fe:117:44
    │
117 │         assert msg.sender == self.factory, "UniswapV2: FORBIDDEN"
    │                                            ^^^^^^^^^^^^^^^^^^^^^^ String<20>: Memory => None

note: 
    ┌─ demos/uniswap.fe:118:9
    │
118 │         self.token0 = token0
    │         ^^^^^^^^^^^ address: Storage { nonce: Some(5) } => None

note: 
    ┌─ demos/uniswap.fe:118:23
    │
118 │         self.token0 = token0
    │                       ^^^^^^ address: Value => None

note: 
    ┌─ demos/uniswap.fe:119:9
    │
119 │         self.token1 = token1
    │         ^^^^^^^^^^^ address: Storage { nonce: Some(6) } => None

note: 
    ┌─ demos/uniswap.fe:119:23
    │
119 │         self.token1 = token1
    │                       ^^^^^^ address: Value => None

note: 
    ┌─ demos/uniswap.fe:124:37
    │
124 │         let block_timestamp: u256 = block.timestamp % 2**32
    │                                     ^^^^^^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:124:55
    │
124 │         let block_timestamp: u256 = block.timestamp % 2**32
    │                                                       ^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:124:58
    │
124 │         let block_timestamp: u256 = block.timestamp % 2**32
    │                                                          ^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:124:55
    │
124 │         let block_timestamp: u256 = block.timestamp % 2**32
    │                                                       ^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:124:37
    │
124 │         let block_timestamp: u256 = block.timestamp % 2**32
    │                                     ^^^^^^^^^^^^^^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:126:34
    │
126 │         let time_elapsed: u256 = block_timestamp - self.block_timestamp_last # overflow is desired
    │                                  ^^^^^^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:126:52
    │
126 │         let time_elapsed: u256 = block_timestamp - self.block_timestamp_last # overflow is desired
    │                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Storage { nonce: Some(9) } => Some(Value)

note: 
    ┌─ demos/uniswap.fe:126:34
    │
126 │         let time_elapsed: u256 = block_timestamp - self.block_timestamp_last # overflow is desired
    │                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:127:12
    │
127 │         if time_elapsed > 0 and reserve0 != 0 and reserve1 != 0:
    │            ^^^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:127:27
    │
127 │         if time_elapsed > 0 and reserve0 != 0 and reserve1 != 0:
    │                           ^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:127:12
    │
127 │         if time_elapsed > 0 and reserve0 != 0 and reserve1 != 0:
    │            ^^^^^^^^^^^^^^^^ bool: Value => None

note: 
    ┌─ demos/uniswap.fe:127:33
    │
127 │         if time_elapsed > 0 and reserve0 != 0 and reserve1 != 0:
    │                                 ^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:127:45
    │
127 │         if time_elapsed > 0 and reserve0 != 0 and reserve1 != 0:
    │                                             ^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:127:33
    │
127 │         if time_elapsed > 0 and reserve0 != 0 and reserve1 != 0:
    │                                 ^^^^^^^^^^^^^ bool: Value => None

note: 
    ┌─ demos/uniswap.fe:127:12
    │
127 │         if time_elapsed > 0 and reserve0 != 0 and reserve1 != 0:
    │            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value => None

note: 
    ┌─ demos/uniswap.fe:127:51
    │
127 │         if time_elapsed > 0 and reserve0 != 0 and reserve1 != 0:
    │                                                   ^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:127:63
    │
127 │         if time_elapsed > 0 and reserve0 != 0 and reserve1 != 0:
    │                                                               ^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:127:51
    │
127 │         if time_elapsed > 0 and reserve0 != 0 and reserve1 != 0:
    │                                                   ^^^^^^^^^^^^^ bool: Value => None

note: 
    ┌─ demos/uniswap.fe:127:12
    │
127 │         if time_elapsed > 0 and reserve0 != 0 and reserve1 != 0:
    │            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value => None

note: 
    ┌─ demos/uniswap.fe:129:13
    │
129 │             self.price0_cumulative_last = self.price0_cumulative_last + (reserve1 / reserve0) * time_elapsed
    │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Storage { nonce: Some(10) } => None

note: 
    ┌─ demos/uniswap.fe:129:43
    │
129 │             self.price0_cumulative_last = self.price0_cumulative_last + (reserve1 / reserve0) * time_elapsed
    │                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Storage { nonce: Some(10) } => Some(Value)

note: 
    ┌─ demos/uniswap.fe:129:74
    │
129 │             self.price0_cumulative_last = self.price0_cumulative_last + (reserve1 / reserve0) * time_elapsed
    │                                                                          ^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:129:85
    │
129 │             self.price0_cumulative_last = self.price0_cumulative_last + (reserve1 / reserve0) * time_elapsed
    │                                                                                     ^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:129:73
    │
129 │             self.price0_cumulative_last = self.price0_cumulative_last + (reserve1 / reserve0) * time_elapsed
    │                                                                         ^^^^^^^^^^^^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:129:97
    │
129 │             self.price0_cumulative_last = self.price0_cumulative_last + (reserve1 / reserve0) * time_elapsed
    │                                                                                                 ^^^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:129:73
    │
129 │             self.price0_cumulative_last = self.price0_cumulative_last + (reserve1 / reserve0) * time_elapsed
    │                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:129:43
    │
129 │             self.price0_cumulative_last = self.price0_cumulative_last + (reserve1 / reserve0) * time_elapsed
    │                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:130:13
    │
130 │             self.price1_cumulative_last = self.price1_cumulative_last + (reserve0 / reserve1) * time_elapsed
    │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Storage { nonce: Some(11) } => None

note: 
    ┌─ demos/uniswap.fe:130:43
    │
130 │             self.price1_cumulative_last = self.price1_cumulative_last + (reserve0 / reserve1) * time_elapsed
    │                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Storage { nonce: Some(11) } => Some(Value)

note: 
    ┌─ demos/uniswap.fe:130:74
    │
130 │             self.price1_cumulative_last = self.price1_cumulative_last + (reserve0 / reserve1) * time_elapsed
    │                                                                          ^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:130:85
    │
130 │             self.price1_cumulative_last = self.price1_cumulative_last + (reserve0 / reserve1) * time_elapsed
    │                                                                                     ^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:130:73
    │
130 │             self.price1_cumulative_last = self.price1_cumulative_last + (reserve0 / reserve1) * time_elapsed
    │                                                                         ^^^^^^^^^^^^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:130:97
    │
130 │             self.price1_cumulative_last = self.price1_cumulative_last + (reserve0 / reserve1) * time_elapsed
    │                                                                                                 ^^^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:130:73
    │
130 │             self.price1_cumulative_last = self.price1_cumulative_last + (reserve0 / reserve1) * time_elapsed
    │                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:130:43
    │
130 │             self.price1_cumulative_last = self.price1_cumulative_last + (reserve0 / reserve1) * time_elapsed
    │                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:132:9
    │
132 │         self.reserve0 = balance0
    │         ^^^^^^^^^^^^^ u256: Storage { nonce: Some(7) } => None

note: 
    ┌─ demos/uniswap.fe:132:25
    │
132 │         self.reserve0 = balance0
    │                         ^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:133:9
    │
133 │         self.reserve1 = balance1
    │         ^^^^^^^^^^^^^ u256: Storage { nonce: Some(8) } => None

note: 
    ┌─ demos/uniswap.fe:133:25
    │
133 │         self.reserve1 = balance1
    │                         ^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:134:9
    │
134 │         self.block_timestamp_last = block_timestamp
    │         ^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Storage { nonce: Some(9) } => None

note: 
    ┌─ demos/uniswap.fe:134:37
    │
134 │         self.block_timestamp_last = block_timestamp
    │                                     ^^^^^^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:135:28
    │
135 │         emit Sync(reserve0=self.reserve0, reserve1=self.reserve1)
    │                            ^^^^^^^^^^^^^ u256: Storage { nonce: Some(7) } => Some(Value)

note: 
    ┌─ demos/uniswap.fe:135:52
    │
135 │         emit Sync(reserve0=self.reserve0, reserve1=self.reserve1)
    │                                                    ^^^^^^^^^^^^^ u256: Storage { nonce: Some(8) } => Some(Value)

note: 
    ┌─ demos/uniswap.fe:139:48
    │
139 │         let fee_to: address = UniswapV2Factory(self.factory).fee_to()
    │                                                ^^^^^^^^^^^^ address: Storage { nonce: Some(4) } => Some(Value)

note: 
    ┌─ demos/uniswap.fe:139:31
    │
139 │         let fee_to: address = UniswapV2Factory(self.factory).fee_to()
    │                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UniswapV2Factory: Value => None

note: 
    ┌─ demos/uniswap.fe:139:31
    │
139 │         let fee_to: address = UniswapV2Factory(self.factory).fee_to()
    │                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ address: Value => None

note: 
    ┌─ demos/uniswap.fe:140:28
    │
140 │         let fee_on: bool = fee_to != address(0)
    │                            ^^^^^^ address: Value => None

note: 
    ┌─ demos/uniswap.fe:140:46
    │
140 │         let fee_on: bool = fee_to != address(0)
    │                                              ^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:140:38
    │
140 │         let fee_on: bool = fee_to != address(0)
    │                                      ^^^^^^^^^^ address: Value => None

note: 
    ┌─ demos/uniswap.fe:140:28
    │
140 │         let fee_on: bool = fee_to != address(0)
    │                            ^^^^^^^^^^^^^^^^^^^^ bool: Value => None

note: 
    ┌─ demos/uniswap.fe:141:28
    │
141 │         let k_last: u256 = self.k_last # gas savings
    │                            ^^^^^^^^^^^ u256: Storage { nonce: Some(12) } => Some(Value)

note: 
    ┌─ demos/uniswap.fe:142:12
    │
142 │         if fee_on:
    │            ^^^^^^ bool: Value => None

note: 
    ┌─ demos/uniswap.fe:143:16
    │
143 │             if k_last != 0:
    │                ^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:143:26
    │
143 │             if k_last != 0:
    │                          ^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:143:16
    │
143 │             if k_last != 0:
    │                ^^^^^^^^^^^ bool: Value => None

note: 
    ┌─ demos/uniswap.fe:144:41
    │
144 │                 let root_k: u256 = sqrt(reserve0 * reserve1)
    │                                         ^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:144:52
    │
144 │                 let root_k: u256 = sqrt(reserve0 * reserve1)
    │                                                    ^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:144:41
    │
144 │                 let root_k: u256 = sqrt(reserve0 * reserve1)
    │                                         ^^^^^^^^^^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:144:36
    │
144 │                 let root_k: u256 = sqrt(reserve0 * reserve1)
    │                                    ^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:145:46
    │
145 │                 let root_k_last: u256 = sqrt(k_last)
    │                                              ^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:145:41
    │
145 │                 let root_k_last: u256 = sqrt(k_last)
    │                                         ^^^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:146:20
    │
146 │                 if root_k > root_k_last:
    │                    ^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:146:29
    │
146 │                 if root_k > root_k_last:
    │                             ^^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:146:20
    │
146 │                 if root_k > root_k_last:
    │                    ^^^^^^^^^^^^^^^^^^^^ bool: Value => None

note: 
    ┌─ demos/uniswap.fe:147:43
    │
147 │                     let numerator: u256 = self.total_supply * root_k - root_k_last
    │                                           ^^^^^^^^^^^^^^^^^ u256: Storage { nonce: Some(2) } => Some(Value)

note: 
    ┌─ demos/uniswap.fe:147:63
    │
147 │                     let numerator: u256 = self.total_supply * root_k - root_k_last
    │                                                               ^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:147:43
    │
147 │                     let numerator: u256 = self.total_supply * root_k - root_k_last
    │                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:147:72
    │
147 │                     let numerator: u256 = self.total_supply * root_k - root_k_last
    │                                                                        ^^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:147:43
    │
147 │                     let numerator: u256 = self.total_supply * root_k - root_k_last
    │                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:148:45
    │
148 │                     let denominator: u256 = root_k * 5 + root_k_last
    │                                             ^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:148:54
    │
148 │                     let denominator: u256 = root_k * 5 + root_k_last
    │                                                      ^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:148:45
    │
148 │                     let denominator: u256 = root_k * 5 + root_k_last
    │                                             ^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:148:58
    │
148 │                     let denominator: u256 = root_k * 5 + root_k_last
    │                                                          ^^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:148:45
    │
148 │                     let denominator: u256 = root_k * 5 + root_k_last
    │                                             ^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:149:43
    │
149 │                     let liquidity: u256 = numerator / denominator
    │                                           ^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:149:55
    │
149 │                     let liquidity: u256 = numerator / denominator
    │                                                       ^^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:149:43
    │
149 │                     let liquidity: u256 = numerator / denominator
    │                                           ^^^^^^^^^^^^^^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:150:24
    │
150 │                     if liquidity > 0:
    │                        ^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:150:36
    │
150 │                     if liquidity > 0:
    │                                    ^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:150:24
    │
150 │                     if liquidity > 0:
    │                        ^^^^^^^^^^^^^ bool: Value => None

note: 
    ┌─ demos/uniswap.fe:151:36
    │
151 │                         self._mint(fee_to, liquidity)
    │                                    ^^^^^^ address: Value => None

note: 
    ┌─ demos/uniswap.fe:151:44
    │
151 │                         self._mint(fee_to, liquidity)
    │                                            ^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:151:25
    │
151 │                         self._mint(fee_to, liquidity)
    │                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (): Value => None

note: 
    ┌─ demos/uniswap.fe:152:14
    │
152 │         elif k_last != 0:
    │              ^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:152:24
    │
152 │         elif k_last != 0:
    │                        ^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:152:14
    │
152 │         elif k_last != 0:
    │              ^^^^^^^^^^^ bool: Value => None

note: 
    ┌─ demos/uniswap.fe:153:13
    │
153 │             self.k_last = 0
    │             ^^^^^^^^^^^ u256: Storage { nonce: Some(12) } => None

note: 
    ┌─ demos/uniswap.fe:153:27
    │
153 │             self.k_last = 0
    │                           ^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:155:16
    │
155 │         return fee_on
    │                ^^^^^^ bool: Value => None

note: 
    ┌─ demos/uniswap.fe:159:39
    │
159 │         let MINIMUM_LIQUIDITY: u256 = 1000
    │                                       ^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:160:30
    │
160 │         let reserve0: u256 = self.reserve0
    │                              ^^^^^^^^^^^^^ u256: Storage { nonce: Some(7) } => Some(Value)

note: 
    ┌─ demos/uniswap.fe:161:30
    │
161 │         let reserve1: u256 = self.reserve1
    │                              ^^^^^^^^^^^^^ u256: Storage { nonce: Some(8) } => Some(Value)

note: 
    ┌─ demos/uniswap.fe:162:36
    │
162 │         let balance0: u256 = ERC20(self.token0).balanceOf(self.address)
    │                                    ^^^^^^^^^^^ address: Storage { nonce: Some(5) } => Some(Value)

note: 
    ┌─ demos/uniswap.fe:162:30
    │
162 │         let balance0: u256 = ERC20(self.token0).balanceOf(self.address)
    │                              ^^^^^^^^^^^^^^^^^^ ERC20: Value => None

note: 
    ┌─ demos/uniswap.fe:162:59
    │
162 │         let balance0: u256 = ERC20(self.token0).balanceOf(self.address)
    │                                                           ^^^^^^^^^^^^ address: Value => None

note: 
    ┌─ demos/uniswap.fe:162:30
    │
162 │         let balance0: u256 = ERC20(self.token0).balanceOf(self.address)
    │                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:163:36
    │
163 │         let balance1: u256 = ERC20(self.token1).balanceOf(self.address)
    │                                    ^^^^^^^^^^^ address: Storage { nonce: Some(6) } => Some(Value)

note: 
    ┌─ demos/uniswap.fe:163:30
    │
163 │         let balance1: u256 = ERC20(self.token1).balanceOf(self.address)
    │                              ^^^^^^^^^^^^^^^^^^ ERC20: Value => None

note: 
    ┌─ demos/uniswap.fe:163:59
    │
163 │         let balance1: u256 = ERC20(self.token1).balanceOf(self.address)
    │                                                           ^^^^^^^^^^^^ address: Value => None

note: 
    ┌─ demos/uniswap.fe:163:30
    │
163 │         let balance1: u256 = ERC20(self.token1).balanceOf(self.address)
    │                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:164:29
    │
164 │         let amount0: u256 = balance0 - self.reserve0
    │                             ^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:164:40
    │
164 │         let amount0: u256 = balance0 - self.reserve0
    │                                        ^^^^^^^^^^^^^ u256: Storage { nonce: Some(7) } => Some(Value)

note: 
    ┌─ demos/uniswap.fe:164:29
    │
164 │         let amount0: u256 = balance0 - self.reserve0
    │                             ^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:165:29
    │
165 │         let amount1: u256 = balance1 - self.reserve1
    │                             ^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:165:40
    │
165 │         let amount1: u256 = balance1 - self.reserve1
    │                                        ^^^^^^^^^^^^^ u256: Storage { nonce: Some(8) } => Some(Value)

note: 
    ┌─ demos/uniswap.fe:165:29
    │
165 │         let amount1: u256 = balance1 - self.reserve1
    │                             ^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:167:43
    │
167 │         let fee_on: bool = self._mint_fee(reserve0, reserve1)
    │                                           ^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:167:53
    │
167 │         let fee_on: bool = self._mint_fee(reserve0, reserve1)
    │                                                     ^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:167:28
    │
167 │         let fee_on: bool = self._mint_fee(reserve0, reserve1)
    │                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value => None

note: 
    ┌─ demos/uniswap.fe:168:34
    │
168 │         let total_supply: u256 = self.total_supply # gas savings, must be defined here since totalSupply can update in _mintFee
    │                                  ^^^^^^^^^^^^^^^^^ u256: Storage { nonce: Some(2) } => Some(Value)

note: 
    ┌─ demos/uniswap.fe:169:31
    │
169 │         let liquidity: u256 = 0
    │                               ^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:170:12
    │
170 │         if total_supply == 0:
    │            ^^^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:170:28
    │
170 │         if total_supply == 0:
    │                            ^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:170:12
    │
170 │         if total_supply == 0:
    │            ^^^^^^^^^^^^^^^^^ bool: Value => None

note: 
    ┌─ demos/uniswap.fe:171:13
    │
171 │             liquidity = sqrt(amount0 * amount1) - MINIMUM_LIQUIDITY
    │             ^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:171:30
    │
171 │             liquidity = sqrt(amount0 * amount1) - MINIMUM_LIQUIDITY
    │                              ^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:171:40
    │
171 │             liquidity = sqrt(amount0 * amount1) - MINIMUM_LIQUIDITY
    │                                        ^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:171:30
    │
171 │             liquidity = sqrt(amount0 * amount1) - MINIMUM_LIQUIDITY
    │                              ^^^^^^^^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:171:25
    │
171 │             liquidity = sqrt(amount0 * amount1) - MINIMUM_LIQUIDITY
    │                         ^^^^^^^^^^^^^^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:171:51
    │
171 │             liquidity = sqrt(amount0 * amount1) - MINIMUM_LIQUIDITY
    │                                                   ^^^^^^^^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:171:25
    │
171 │             liquidity = sqrt(amount0 * amount1) - MINIMUM_LIQUIDITY
    │                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:172:32
    │
172 │             self._mint(address(0), MINIMUM_LIQUIDITY) # permanently lock the first MINIMUM_LIQUIDITY tokens
    │                                ^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:172:24
    │
172 │             self._mint(address(0), MINIMUM_LIQUIDITY) # permanently lock the first MINIMUM_LIQUIDITY tokens
    │                        ^^^^^^^^^^ address: Value => None

note: 
    ┌─ demos/uniswap.fe:172:36
    │
172 │             self._mint(address(0), MINIMUM_LIQUIDITY) # permanently lock the first MINIMUM_LIQUIDITY tokens
    │                                    ^^^^^^^^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:172:13
    │
172 │             self._mint(address(0), MINIMUM_LIQUIDITY) # permanently lock the first MINIMUM_LIQUIDITY tokens
    │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (): Value => None

note: 
    ┌─ demos/uniswap.fe:174:13
    │
174 │             liquidity = min((amount0 * total_supply) / reserve0, (amount1 * total_supply) / reserve1)
    │             ^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:174:30
    │
174 │             liquidity = min((amount0 * total_supply) / reserve0, (amount1 * total_supply) / reserve1)
    │                              ^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:174:40
    │
174 │             liquidity = min((amount0 * total_supply) / reserve0, (amount1 * total_supply) / reserve1)
    │                                        ^^^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:174:29
    │
174 │             liquidity = min((amount0 * total_supply) / reserve0, (amount1 * total_supply) / reserve1)
    │                             ^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:174:56
    │
174 │             liquidity = min((amount0 * total_supply) / reserve0, (amount1 * total_supply) / reserve1)
    │                                                        ^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:174:29
    │
174 │             liquidity = min((amount0 * total_supply) / reserve0, (amount1 * total_supply) / reserve1)
    │                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:174:67
    │
174 │             liquidity = min((amount0 * total_supply) / reserve0, (amount1 * total_supply) / reserve1)
    │                                                                   ^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:174:77
    │
174 │             liquidity = min((amount0 * total_supply) / reserve0, (amount1 * total_supply) / reserve1)
    │                                                                             ^^^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:174:66
    │
174 │             liquidity = min((amount0 * total_supply) / reserve0, (amount1 * total_supply) / reserve1)
    │                                                                  ^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:174:93
    │
174 │             liquidity = min((amount0 * total_supply) / reserve0, (amount1 * total_supply) / reserve1)
    │                                                                                             ^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:174:66
    │
174 │             liquidity = min((amount0 * total_supply) / reserve0, (amount1 * total_supply) / reserve1)
    │                                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:174:25
    │
174 │             liquidity = min((amount0 * total_supply) / reserve0, (amount1 * total_supply) / reserve1)
    │                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:176:16
    │
176 │         assert liquidity > 0, "UniswapV2: INSUFFICIENT_LIQUIDITY_MINTED"
    │                ^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:176:28
    │
176 │         assert liquidity > 0, "UniswapV2: INSUFFICIENT_LIQUIDITY_MINTED"
    │                            ^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:176:16
    │
176 │         assert liquidity > 0, "UniswapV2: INSUFFICIENT_LIQUIDITY_MINTED"
    │                ^^^^^^^^^^^^^ bool: Value => None

note: 
    ┌─ demos/uniswap.fe:176:31
    │
176 │         assert liquidity > 0, "UniswapV2: INSUFFICIENT_LIQUIDITY_MINTED"
    │                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ String<40>: Memory => None

note: 
    ┌─ demos/uniswap.fe:178:20
    │
178 │         self._mint(to, liquidity)
    │                    ^^ address: Value => None

note: 
    ┌─ demos/uniswap.fe:178:24
    │
178 │         self._mint(to, liquidity)
    │                        ^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:178:9
    │
178 │         self._mint(to, liquidity)
    │         ^^^^^^^^^^^^^^^^^^^^^^^^^ (): Value => None

note: 
    ┌─ demos/uniswap.fe:179:22
    │
179 │         self._update(balance0, balance1, reserve0, reserve1)
    │                      ^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:179:32
    │
179 │         self._update(balance0, balance1, reserve0, reserve1)
    │                                ^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:179:42
    │
179 │         self._update(balance0, balance1, reserve0, reserve1)
    │                                          ^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:179:52
    │
179 │         self._update(balance0, balance1, reserve0, reserve1)
    │                                                    ^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:179:9
    │
179 │         self._update(balance0, balance1, reserve0, reserve1)
    │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (): Value => None

note: 
    ┌─ demos/uniswap.fe:181:12
    │
181 │         if fee_on:
    │            ^^^^^^ bool: Value => None

note: 
    ┌─ demos/uniswap.fe:182:13
    │
182 │             self.k_last = reserve0 * reserve1 # reserve0 and reserve1 are up-to-date
    │             ^^^^^^^^^^^ u256: Storage { nonce: Some(12) } => None

note: 
    ┌─ demos/uniswap.fe:182:27
    │
182 │             self.k_last = reserve0 * reserve1 # reserve0 and reserve1 are up-to-date
    │                           ^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:182:38
    │
182 │             self.k_last = reserve0 * reserve1 # reserve0 and reserve1 are up-to-date
    │                                      ^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:182:27
    │
182 │             self.k_last = reserve0 * reserve1 # reserve0 and reserve1 are up-to-date
    │                           ^^^^^^^^^^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:184:26
    │
184 │         emit Mint(sender=msg.sender, amount0, amount1)
    │                          ^^^^^^^^^^ address: Value => None

note: 
    ┌─ demos/uniswap.fe:184:38
    │
184 │         emit Mint(sender=msg.sender, amount0, amount1)
    │                                      ^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:184:47
    │
184 │         emit Mint(sender=msg.sender, amount0, amount1)
    │                                               ^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:185:16
    │
185 │         return liquidity
    │                ^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:189:30
    │
189 │         let reserve0: u256 = self.reserve0
    │                              ^^^^^^^^^^^^^ u256: Storage { nonce: Some(7) } => Some(Value)

note: 
    ┌─ demos/uniswap.fe:190:30
    │
190 │         let reserve1: u256 = self.reserve1
    │                              ^^^^^^^^^^^^^ u256: Storage { nonce: Some(8) } => Some(Value)

note: 
    ┌─ demos/uniswap.fe:191:35
    │
191 │         let token0: ERC20 = ERC20(self.token0)
    │                                   ^^^^^^^^^^^ address: Storage { nonce: Some(5) } => Some(Value)

note: 
    ┌─ demos/uniswap.fe:191:29
    │
191 │         let token0: ERC20 = ERC20(self.token0)
    │                             ^^^^^^^^^^^^^^^^^^ ERC20: Value => None

note: 
    ┌─ demos/uniswap.fe:192:35
    │
192 │         let token1: ERC20 = ERC20(self.token1)
    │                                   ^^^^^^^^^^^ address: Storage { nonce: Some(6) } => Some(Value)

note: 
    ┌─ demos/uniswap.fe:192:29
    │
192 │         let token1: ERC20 = ERC20(self.token1)
    │                             ^^^^^^^^^^^^^^^^^^ ERC20: Value => None

note: 
    ┌─ demos/uniswap.fe:193:30
    │
193 │         let balance0: u256 = token0.balanceOf(self.address)
    │                              ^^^^^^ ERC20: Value => None

note: 
    ┌─ demos/uniswap.fe:193:47
    │
193 │         let balance0: u256 = token0.balanceOf(self.address)
    │                                               ^^^^^^^^^^^^ address: Value => None

note: 
    ┌─ demos/uniswap.fe:193:30
    │
193 │         let balance0: u256 = token0.balanceOf(self.address)
    │                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:194:30
    │
194 │         let balance1: u256 = token1.balanceOf(self.address)
    │                              ^^^^^^ ERC20: Value => None

note: 
    ┌─ demos/uniswap.fe:194:47
    │
194 │         let balance1: u256 = token1.balanceOf(self.address)
    │                                               ^^^^^^^^^^^^ address: Value => None

note: 
    ┌─ demos/uniswap.fe:194:30
    │
194 │         let balance1: u256 = token1.balanceOf(self.address)
    │                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:195:31
    │
195 │         let liquidity: u256 = self.balances[self.address]
    │                               ^^^^^^^^^^^^^ Map<address, u256>: Storage { nonce: Some(0) } => None

note: 
    ┌─ demos/uniswap.fe:195:45
    │
195 │         let liquidity: u256 = self.balances[self.address]
    │                                             ^^^^^^^^^^^^ address: Value => None

note: 
    ┌─ demos/uniswap.fe:195:31
    │
195 │         let liquidity: u256 = self.balances[self.address]
    │                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Storage { nonce: None } => Some(Value)

note: 
    ┌─ demos/uniswap.fe:197:43
    │
197 │         let fee_on: bool = self._mint_fee(reserve0, reserve1)
    │                                           ^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:197:53
    │
197 │         let fee_on: bool = self._mint_fee(reserve0, reserve1)
    │                                                     ^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:197:28
    │
197 │         let fee_on: bool = self._mint_fee(reserve0, reserve1)
    │                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value => None

note: 
    ┌─ demos/uniswap.fe:198:34
    │
198 │         let total_supply: u256 = self.total_supply # gas savings, must be defined here since total_supply can update in _mintFee
    │                                  ^^^^^^^^^^^^^^^^^ u256: Storage { nonce: Some(2) } => Some(Value)

note: 
    ┌─ demos/uniswap.fe:199:30
    │
199 │         let amount0: u256 = (liquidity * balance0) / total_supply # using balances ensures pro-rata distribution
    │                              ^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:199:42
    │
199 │         let amount0: u256 = (liquidity * balance0) / total_supply # using balances ensures pro-rata distribution
    │                                          ^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:199:29
    │
199 │         let amount0: u256 = (liquidity * balance0) / total_supply # using balances ensures pro-rata distribution
    │                             ^^^^^^^^^^^^^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:199:54
    │
199 │         let amount0: u256 = (liquidity * balance0) / total_supply # using balances ensures pro-rata distribution
    │                                                      ^^^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:199:29
    │
199 │         let amount0: u256 = (liquidity * balance0) / total_supply # using balances ensures pro-rata distribution
    │                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:200:30
    │
200 │         let amount1: u256 = (liquidity * balance1) / total_supply # using balances ensures pro-rata distribution
    │                              ^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:200:42
    │
200 │         let amount1: u256 = (liquidity * balance1) / total_supply # using balances ensures pro-rata distribution
    │                                          ^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:200:29
    │
200 │         let amount1: u256 = (liquidity * balance1) / total_supply # using balances ensures pro-rata distribution
    │                             ^^^^^^^^^^^^^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:200:54
    │
200 │         let amount1: u256 = (liquidity * balance1) / total_supply # using balances ensures pro-rata distribution
    │                                                      ^^^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:200:29
    │
200 │         let amount1: u256 = (liquidity * balance1) / total_supply # using balances ensures pro-rata distribution
    │                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:201:16
    │
201 │         assert amount0 > 0 and amount1 > 0, "UniswapV2: INSUFFICIENT_LIQUIDITY_BURNED"
    │                ^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:201:26
    │
201 │         assert amount0 > 0 and amount1 > 0, "UniswapV2: INSUFFICIENT_LIQUIDITY_BURNED"
    │                          ^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:201:16
    │
201 │         assert amount0 > 0 and amount1 > 0, "UniswapV2: INSUFFICIENT_LIQUIDITY_BURNED"
    │                ^^^^^^^^^^^ bool: Value => None

note: 
    ┌─ demos/uniswap.fe:201:32
    │
201 │         assert amount0 > 0 and amount1 > 0, "UniswapV2: INSUFFICIENT_LIQUIDITY_BURNED"
    │                                ^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:201:42
    │
201 │         assert amount0 > 0 and amount1 > 0, "UniswapV2: INSUFFICIENT_LIQUIDITY_BURNED"
    │                                          ^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:201:32
    │
201 │         assert amount0 > 0 and amount1 > 0, "UniswapV2: INSUFFICIENT_LIQUIDITY_BURNED"
    │                                ^^^^^^^^^^^ bool: Value => None

note: 
    ┌─ demos/uniswap.fe:201:16
    │
201 │         assert amount0 > 0 and amount1 > 0, "UniswapV2: INSUFFICIENT_LIQUIDITY_BURNED"
    │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value => None

note: 
    ┌─ demos/uniswap.fe:201:45
    │
201 │         assert amount0 > 0 and amount1 > 0, "UniswapV2: INSUFFICIENT_LIQUIDITY_BURNED"
    │                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ String<40>: Memory => None

note: 
    ┌─ demos/uniswap.fe:202:20
    │
202 │         self._burn(self.address, liquidity)
    │                    ^^^^^^^^^^^^ address: Value => None

note: 
    ┌─ demos/uniswap.fe:202:34
    │
202 │         self._burn(self.address, liquidity)
    │                                  ^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:202:9
    │
202 │         self._burn(self.address, liquidity)
    │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (): Value => None

note: 
    ┌─ demos/uniswap.fe:203:9
    │
203 │         token0.transfer(to, amount0)
    │         ^^^^^^ ERC20: Value => None

note: 
    ┌─ demos/uniswap.fe:203:25
    │
203 │         token0.transfer(to, amount0)
    │                         ^^ address: Value => None

note: 
    ┌─ demos/uniswap.fe:203:29
    │
203 │         token0.transfer(to, amount0)
    │                             ^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:203:9
    │
203 │         token0.transfer(to, amount0)
    │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value => None

note: 
    ┌─ demos/uniswap.fe:204:9
    │
204 │         token1.transfer(to, amount1)
    │         ^^^^^^ ERC20: Value => None

note: 
    ┌─ demos/uniswap.fe:204:25
    │
204 │         token1.transfer(to, amount1)
    │                         ^^ address: Value => None

note: 
    ┌─ demos/uniswap.fe:204:29
    │
204 │         token1.transfer(to, amount1)
    │                             ^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:204:9
    │
204 │         token1.transfer(to, amount1)
    │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value => None

note: 
    ┌─ demos/uniswap.fe:205:9
    │
205 │         balance0 = token0.balanceOf(self.address)
    │         ^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:205:20
    │
205 │         balance0 = token0.balanceOf(self.address)
    │                    ^^^^^^ ERC20: Value => None

note: 
    ┌─ demos/uniswap.fe:205:37
    │
205 │         balance0 = token0.balanceOf(self.address)
    │                                     ^^^^^^^^^^^^ address: Value => None

note: 
    ┌─ demos/uniswap.fe:205:20
    │
205 │         balance0 = token0.balanceOf(self.address)
    │                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:206:9
    │
206 │         balance1 = token1.balanceOf(self.address)
    │         ^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:206:20
    │
206 │         balance1 = token1.balanceOf(self.address)
    │                    ^^^^^^ ERC20: Value => None

note: 
    ┌─ demos/uniswap.fe:206:37
    │
206 │         balance1 = token1.balanceOf(self.address)
    │                                     ^^^^^^^^^^^^ address: Value => None

note: 
    ┌─ demos/uniswap.fe:206:20
    │
206 │         balance1 = token1.balanceOf(self.address)
    │                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:208:22
    │
208 │         self._update(balance0, balance1, reserve0, reserve1)
    │                      ^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:208:32
    │
208 │         self._update(balance0, balance1, reserve0, reserve1)
    │                                ^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:208:42
    │
208 │         self._update(balance0, balance1, reserve0, reserve1)
    │                                          ^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:208:52
    │
208 │         self._update(balance0, balance1, reserve0, reserve1)
    │                                                    ^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:208:9
    │
208 │         self._update(balance0, balance1, reserve0, reserve1)
    │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (): Value => None

note: 
    ┌─ demos/uniswap.fe:210:12
    │
210 │         if fee_on:
    │            ^^^^^^ bool: Value => None

note: 
    ┌─ demos/uniswap.fe:211:13
    │
211 │             self.k_last = reserve0 * reserve1 # reserve0 and reserve1 are up-to-date
    │             ^^^^^^^^^^^ u256: Storage { nonce: Some(12) } => None

note: 
    ┌─ demos/uniswap.fe:211:27
    │
211 │             self.k_last = reserve0 * reserve1 # reserve0 and reserve1 are up-to-date
    │                           ^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:211:38
    │
211 │             self.k_last = reserve0 * reserve1 # reserve0 and reserve1 are up-to-date
    │                                      ^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:211:27
    │
211 │             self.k_last = reserve0 * reserve1 # reserve0 and reserve1 are up-to-date
    │                           ^^^^^^^^^^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:213:26
    │
213 │         emit Burn(sender=msg.sender, amount0, amount1, to)
    │                          ^^^^^^^^^^ address: Value => None

note: 
    ┌─ demos/uniswap.fe:213:38
    │
213 │         emit Burn(sender=msg.sender, amount0, amount1, to)
    │                                      ^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:213:47
    │
213 │         emit Burn(sender=msg.sender, amount0, amount1, to)
    │                                               ^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:213:56
    │
213 │         emit Burn(sender=msg.sender, amount0, amount1, to)
    │                                                        ^^ address: Value => None

note: 
    ┌─ demos/uniswap.fe:214:17
    │
214 │         return (amount0, amount1)
    │                 ^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:214:26
    │
214 │         return (amount0, amount1)
    │                          ^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:214:16
    │
214 │         return (amount0, amount1)
    │                ^^^^^^^^^^^^^^^^^^ (u256, u256): Memory => None

note: 
    ┌─ demos/uniswap.fe:220:16
    │
220 │         assert amount0_out > 0 or amount1_out > 0, "UniswapV2: INSUFFICIENT_OUTPUT_AMOUNT"
    │                ^^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:220:30
    │
220 │         assert amount0_out > 0 or amount1_out > 0, "UniswapV2: INSUFFICIENT_OUTPUT_AMOUNT"
    │                              ^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:220:16
    │
220 │         assert amount0_out > 0 or amount1_out > 0, "UniswapV2: INSUFFICIENT_OUTPUT_AMOUNT"
    │                ^^^^^^^^^^^^^^^ bool: Value => None

note: 
    ┌─ demos/uniswap.fe:220:35
    │
220 │         assert amount0_out > 0 or amount1_out > 0, "UniswapV2: INSUFFICIENT_OUTPUT_AMOUNT"
    │                                   ^^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:220:49
    │
220 │         assert amount0_out > 0 or amount1_out > 0, "UniswapV2: INSUFFICIENT_OUTPUT_AMOUNT"
    │                                                 ^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:220:35
    │
220 │         assert amount0_out > 0 or amount1_out > 0, "UniswapV2: INSUFFICIENT_OUTPUT_AMOUNT"
    │                                   ^^^^^^^^^^^^^^^ bool: Value => None

note: 
    ┌─ demos/uniswap.fe:220:16
    │
220 │         assert amount0_out > 0 or amount1_out > 0, "UniswapV2: INSUFFICIENT_OUTPUT_AMOUNT"
    │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value => None

note: 
    ┌─ demos/uniswap.fe:220:52
    │
220 │         assert amount0_out > 0 or amount1_out > 0, "UniswapV2: INSUFFICIENT_OUTPUT_AMOUNT"
    │                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ String<37>: Memory => None

note: 
    ┌─ demos/uniswap.fe:221:30
    │
221 │         let reserve0: u256 = self.reserve0
    │                              ^^^^^^^^^^^^^ u256: Storage { nonce: Some(7) } => Some(Value)

note: 
    ┌─ demos/uniswap.fe:222:30
    │
222 │         let reserve1: u256 = self.reserve1
    │                              ^^^^^^^^^^^^^ u256: Storage { nonce: Some(8) } => Some(Value)

note: 
    ┌─ demos/uniswap.fe:223:16
    │
223 │         assert amount0_out < reserve0 and amount1_out < reserve1, "UniswapV2: INSUFFICIENT_LIQUIDITY"
    │                ^^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:223:30
    │
223 │         assert amount0_out < reserve0 and amount1_out < reserve1, "UniswapV2: INSUFFICIENT_LIQUIDITY"
    │                              ^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:223:16
    │
223 │         assert amount0_out < reserve0 and amount1_out < reserve1, "UniswapV2: INSUFFICIENT_LIQUIDITY"
    │                ^^^^^^^^^^^^^^^^^^^^^^ bool: Value => None

note: 
    ┌─ demos/uniswap.fe:223:43
    │
223 │         assert amount0_out < reserve0 and amount1_out < reserve1, "UniswapV2: INSUFFICIENT_LIQUIDITY"
    │                                           ^^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:223:57
    │
223 │         assert amount0_out < reserve0 and amount1_out < reserve1, "UniswapV2: INSUFFICIENT_LIQUIDITY"
    │                                                         ^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:223:43
    │
223 │         assert amount0_out < reserve0 and amount1_out < reserve1, "UniswapV2: INSUFFICIENT_LIQUIDITY"
    │                                           ^^^^^^^^^^^^^^^^^^^^^^ bool: Value => None

note: 
    ┌─ demos/uniswap.fe:223:16
    │
223 │         assert amount0_out < reserve0 and amount1_out < reserve1, "UniswapV2: INSUFFICIENT_LIQUIDITY"
    │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value => None

note: 
    ┌─ demos/uniswap.fe:223:67
    │
223 │         assert amount0_out < reserve0 and amount1_out < reserve1, "UniswapV2: INSUFFICIENT_LIQUIDITY"
    │                                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ String<33>: Memory => None

note: 
    ┌─ demos/uniswap.fe:225:35
    │
225 │         let token0: ERC20 = ERC20(self.token0)
    │                                   ^^^^^^^^^^^ address: Storage { nonce: Some(5) } => Some(Value)

note: 
    ┌─ demos/uniswap.fe:225:29
    │
225 │         let token0: ERC20 = ERC20(self.token0)
    │                             ^^^^^^^^^^^^^^^^^^ ERC20: Value => None

note: 
    ┌─ demos/uniswap.fe:226:35
    │
226 │         let token1: ERC20 = ERC20(self.token1)
    │                                   ^^^^^^^^^^^ address: Storage { nonce: Some(6) } => Some(Value)

note: 
    ┌─ demos/uniswap.fe:226:29
    │
226 │         let token1: ERC20 = ERC20(self.token1)
    │                             ^^^^^^^^^^^^^^^^^^ ERC20: Value => None

note: 
    ┌─ demos/uniswap.fe:229:16
    │
229 │         assert to != address(token0) and to != address(token1), "UniswapV2: INVALID_TO"
    │                ^^ address: Value => None

note: 
    ┌─ demos/uniswap.fe:229:30
    │
229 │         assert to != address(token0) and to != address(token1), "UniswapV2: INVALID_TO"
    │                              ^^^^^^ ERC20: Value => None

note: 
    ┌─ demos/uniswap.fe:229:22
    │
229 │         assert to != address(token0) and to != address(token1), "UniswapV2: INVALID_TO"
    │                      ^^^^^^^^^^^^^^^ address: Value => None

note: 
    ┌─ demos/uniswap.fe:229:16
    │
229 │         assert to != address(token0) and to != address(token1), "UniswapV2: INVALID_TO"
    │                ^^^^^^^^^^^^^^^^^^^^^ bool: Value => None

note: 
    ┌─ demos/uniswap.fe:229:42
    │
229 │         assert to != address(token0) and to != address(token1), "UniswapV2: INVALID_TO"
    │                                          ^^ address: Value => None

note: 
    ┌─ demos/uniswap.fe:229:56
    │
229 │         assert to != address(token0) and to != address(token1), "UniswapV2: INVALID_TO"
    │                                                        ^^^^^^ ERC20: Value => None

note: 
    ┌─ demos/uniswap.fe:229:48
    │
229 │         assert to != address(token0) and to != address(token1), "UniswapV2: INVALID_TO"
    │                                                ^^^^^^^^^^^^^^^ address: Value => None

note: 
    ┌─ demos/uniswap.fe:229:42
    │
229 │         assert to != address(token0) and to != address(token1), "UniswapV2: INVALID_TO"
    │                                          ^^^^^^^^^^^^^^^^^^^^^ bool: Value => None

note: 
    ┌─ demos/uniswap.fe:229:16
    │
229 │         assert to != address(token0) and to != address(token1), "UniswapV2: INVALID_TO"
    │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value => None

note: 
    ┌─ demos/uniswap.fe:229:65
    │
229 │         assert to != address(token0) and to != address(token1), "UniswapV2: INVALID_TO"
    │                                                                 ^^^^^^^^^^^^^^^^^^^^^^^ String<21>: Memory => None

note: 
    ┌─ demos/uniswap.fe:231:12
    │
231 │         if amount0_out > 0:
    │            ^^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:231:26
    │
231 │         if amount0_out > 0:
    │                          ^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:231:12
    │
231 │         if amount0_out > 0:
    │            ^^^^^^^^^^^^^^^ bool: Value => None

note: 
    ┌─ demos/uniswap.fe:232:13
    │
232 │             token0.transfer(to, amount0_out) # optimistically transfer tokens
    │             ^^^^^^ ERC20: Value => None

note: 
    ┌─ demos/uniswap.fe:232:29
    │
232 │             token0.transfer(to, amount0_out) # optimistically transfer tokens
    │                             ^^ address: Value => None

note: 
    ┌─ demos/uniswap.fe:232:33
    │
232 │             token0.transfer(to, amount0_out) # optimistically transfer tokens
    │                                 ^^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:232:13
    │
232 │             token0.transfer(to, amount0_out) # optimistically transfer tokens
    │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value => None

note: 
    ┌─ demos/uniswap.fe:233:12
    │
233 │         if amount1_out > 0:
    │            ^^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:233:26
    │
233 │         if amount1_out > 0:
    │                          ^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:233:12
    │
233 │         if amount1_out > 0:
    │            ^^^^^^^^^^^^^^^ bool: Value => None

note: 
    ┌─ demos/uniswap.fe:234:13
    │
234 │             token1.transfer(to, amount1_out) # optimistically transfer tokens
    │             ^^^^^^ ERC20: Value => None

note: 
    ┌─ demos/uniswap.fe:234:29
    │
234 │             token1.transfer(to, amount1_out) # optimistically transfer tokens
    │                             ^^ address: Value => None

note: 
    ┌─ demos/uniswap.fe:234:33
    │
234 │             token1.transfer(to, amount1_out) # optimistically transfer tokens
    │                                 ^^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:234:13
    │
234 │             token1.transfer(to, amount1_out) # optimistically transfer tokens
    │             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value => None

note: 
    ┌─ demos/uniswap.fe:239:30
    │
239 │         let balance0: u256 = token0.balanceOf(self.address)
    │                              ^^^^^^ ERC20: Value => None

note: 
    ┌─ demos/uniswap.fe:239:47
    │
239 │         let balance0: u256 = token0.balanceOf(self.address)
    │                                               ^^^^^^^^^^^^ address: Value => None

note: 
    ┌─ demos/uniswap.fe:239:30
    │
239 │         let balance0: u256 = token0.balanceOf(self.address)
    │                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:240:30
    │
240 │         let balance1: u256 = token1.balanceOf(self.address)
    │                              ^^^^^^ ERC20: Value => None

note: 
    ┌─ demos/uniswap.fe:240:47
    │
240 │         let balance1: u256 = token1.balanceOf(self.address)
    │                                               ^^^^^^^^^^^^ address: Value => None

note: 
    ┌─ demos/uniswap.fe:240:30
    │
240 │         let balance1: u256 = token1.balanceOf(self.address)
    │                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:242:71
    │
242 │         let amount0_in: u256 = balance0 - (reserve0 - amount0_out) if balance0 > reserve0 - amount0_out else 0
    │                                                                       ^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:242:82
    │
242 │         let amount0_in: u256 = balance0 - (reserve0 - amount0_out) if balance0 > reserve0 - amount0_out else 0
    │                                                                                  ^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:242:93
    │
242 │         let amount0_in: u256 = balance0 - (reserve0 - amount0_out) if balance0 > reserve0 - amount0_out else 0
    │                                                                                             ^^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:242:82
    │
242 │         let amount0_in: u256 = balance0 - (reserve0 - amount0_out) if balance0 > reserve0 - amount0_out else 0
    │                                                                                  ^^^^^^^^^^^^^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:242:71
    │
242 │         let amount0_in: u256 = balance0 - (reserve0 - amount0_out) if balance0 > reserve0 - amount0_out else 0
    │                                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value => None

note: 
    ┌─ demos/uniswap.fe:242:32
    │
242 │         let amount0_in: u256 = balance0 - (reserve0 - amount0_out) if balance0 > reserve0 - amount0_out else 0
    │                                ^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:242:44
    │
242 │         let amount0_in: u256 = balance0 - (reserve0 - amount0_out) if balance0 > reserve0 - amount0_out else 0
    │                                            ^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:242:55
    │
242 │         let amount0_in: u256 = balance0 - (reserve0 - amount0_out) if balance0 > reserve0 - amount0_out else 0
    │                                                       ^^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:242:43
    │
242 │         let amount0_in: u256 = balance0 - (reserve0 - amount0_out) if balance0 > reserve0 - amount0_out else 0
    │                                           ^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:242:32
    │
242 │         let amount0_in: u256 = balance0 - (reserve0 - amount0_out) if balance0 > reserve0 - amount0_out else 0
    │                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:242:110
    │
242 │         let amount0_in: u256 = balance0 - (reserve0 - amount0_out) if balance0 > reserve0 - amount0_out else 0
    │                                                                                                              ^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:242:32
    │
242 │         let amount0_in: u256 = balance0 - (reserve0 - amount0_out) if balance0 > reserve0 - amount0_out else 0
    │                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:243:71
    │
243 │         let amount1_in: u256 = balance1 - (reserve1 - amount1_out) if balance1 > reserve1 - amount1_out else 0
    │                                                                       ^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:243:82
    │
243 │         let amount1_in: u256 = balance1 - (reserve1 - amount1_out) if balance1 > reserve1 - amount1_out else 0
    │                                                                                  ^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:243:93
    │
243 │         let amount1_in: u256 = balance1 - (reserve1 - amount1_out) if balance1 > reserve1 - amount1_out else 0
    │                                                                                             ^^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:243:82
    │
243 │         let amount1_in: u256 = balance1 - (reserve1 - amount1_out) if balance1 > reserve1 - amount1_out else 0
    │                                                                                  ^^^^^^^^^^^^^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:243:71
    │
243 │         let amount1_in: u256 = balance1 - (reserve1 - amount1_out) if balance1 > reserve1 - amount1_out else 0
    │                                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value => None

note: 
    ┌─ demos/uniswap.fe:243:32
    │
243 │         let amount1_in: u256 = balance1 - (reserve1 - amount1_out) if balance1 > reserve1 - amount1_out else 0
    │                                ^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:243:44
    │
243 │         let amount1_in: u256 = balance1 - (reserve1 - amount1_out) if balance1 > reserve1 - amount1_out else 0
    │                                            ^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:243:55
    │
243 │         let amount1_in: u256 = balance1 - (reserve1 - amount1_out) if balance1 > reserve1 - amount1_out else 0
    │                                                       ^^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:243:43
    │
243 │         let amount1_in: u256 = balance1 - (reserve1 - amount1_out) if balance1 > reserve1 - amount1_out else 0
    │                                           ^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:243:32
    │
243 │         let amount1_in: u256 = balance1 - (reserve1 - amount1_out) if balance1 > reserve1 - amount1_out else 0
    │                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:243:110
    │
243 │         let amount1_in: u256 = balance1 - (reserve1 - amount1_out) if balance1 > reserve1 - amount1_out else 0
    │                                                                                                              ^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:243:32
    │
243 │         let amount1_in: u256 = balance1 - (reserve1 - amount1_out) if balance1 > reserve1 - amount1_out else 0
    │                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:245:16
    │
245 │         assert amount0_in > 0 or amount1_in > 0, "UniswapV2: INSUFFICIENT_INPUT_AMOUNT"
    │                ^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:245:29
    │
245 │         assert amount0_in > 0 or amount1_in > 0, "UniswapV2: INSUFFICIENT_INPUT_AMOUNT"
    │                             ^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:245:16
    │
245 │         assert amount0_in > 0 or amount1_in > 0, "UniswapV2: INSUFFICIENT_INPUT_AMOUNT"
    │                ^^^^^^^^^^^^^^ bool: Value => None

note: 
    ┌─ demos/uniswap.fe:245:34
    │
245 │         assert amount0_in > 0 or amount1_in > 0, "UniswapV2: INSUFFICIENT_INPUT_AMOUNT"
    │                                  ^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:245:47
    │
245 │         assert amount0_in > 0 or amount1_in > 0, "UniswapV2: INSUFFICIENT_INPUT_AMOUNT"
    │                                               ^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:245:34
    │
245 │         assert amount0_in > 0 or amount1_in > 0, "UniswapV2: INSUFFICIENT_INPUT_AMOUNT"
    │                                  ^^^^^^^^^^^^^^ bool: Value => None

note: 
    ┌─ demos/uniswap.fe:245:16
    │
245 │         assert amount0_in > 0 or amount1_in > 0, "UniswapV2: INSUFFICIENT_INPUT_AMOUNT"
    │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value => None

note: 
    ┌─ demos/uniswap.fe:245:50
    │
245 │         assert amount0_in > 0 or amount1_in > 0, "UniswapV2: INSUFFICIENT_INPUT_AMOUNT"
    │                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ String<36>: Memory => None

note: 
    ┌─ demos/uniswap.fe:247:39
    │
247 │         let balance0_adjusted: u256 = balance0 * 1000 - amount0_in * 3
    │                                       ^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:247:50
    │
247 │         let balance0_adjusted: u256 = balance0 * 1000 - amount0_in * 3
    │                                                  ^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:247:39
    │
247 │         let balance0_adjusted: u256 = balance0 * 1000 - amount0_in * 3
    │                                       ^^^^^^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:247:57
    │
247 │         let balance0_adjusted: u256 = balance0 * 1000 - amount0_in * 3
    │                                                         ^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:247:70
    │
247 │         let balance0_adjusted: u256 = balance0 * 1000 - amount0_in * 3
    │                                                                      ^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:247:57
    │
247 │         let balance0_adjusted: u256 = balance0 * 1000 - amount0_in * 3
    │                                                         ^^^^^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:247:39
    │
247 │         let balance0_adjusted: u256 = balance0 * 1000 - amount0_in * 3
    │                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:248:39
    │
248 │         let balance1_adjusted: u256 = balance1 * 1000 - amount1_in * 3
    │                                       ^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:248:50
    │
248 │         let balance1_adjusted: u256 = balance1 * 1000 - amount1_in * 3
    │                                                  ^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:248:39
    │
248 │         let balance1_adjusted: u256 = balance1 * 1000 - amount1_in * 3
    │                                       ^^^^^^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:248:57
    │
248 │         let balance1_adjusted: u256 = balance1 * 1000 - amount1_in * 3
    │                                                         ^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:248:70
    │
248 │         let balance1_adjusted: u256 = balance1 * 1000 - amount1_in * 3
    │                                                                      ^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:248:57
    │
248 │         let balance1_adjusted: u256 = balance1 * 1000 - amount1_in * 3
    │                                                         ^^^^^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:248:39
    │
248 │         let balance1_adjusted: u256 = balance1 * 1000 - amount1_in * 3
    │                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:250:16
    │
250 │         assert balance0_adjusted * balance1_adjusted >= reserve0 * reserve1 * 1000000, "UniswapV2: K"
    │                ^^^^^^^^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:250:36
    │
250 │         assert balance0_adjusted * balance1_adjusted >= reserve0 * reserve1 * 1000000, "UniswapV2: K"
    │                                    ^^^^^^^^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:250:16
    │
250 │         assert balance0_adjusted * balance1_adjusted >= reserve0 * reserve1 * 1000000, "UniswapV2: K"
    │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:250:57
    │
250 │         assert balance0_adjusted * balance1_adjusted >= reserve0 * reserve1 * 1000000, "UniswapV2: K"
    │                                                         ^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:250:68
    │
250 │         assert balance0_adjusted * balance1_adjusted >= reserve0 * reserve1 * 1000000, "UniswapV2: K"
    │                                                                    ^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:250:57
    │
250 │         assert balance0_adjusted * balance1_adjusted >= reserve0 * reserve1 * 1000000, "UniswapV2: K"
    │                                                         ^^^^^^^^^^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:250:79
    │
250 │         assert balance0_adjusted * balance1_adjusted >= reserve0 * reserve1 * 1000000, "UniswapV2: K"
    │                                                                               ^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:250:57
    │
250 │         assert balance0_adjusted * balance1_adjusted >= reserve0 * reserve1 * 1000000, "UniswapV2: K"
    │                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:250:16
    │
250 │         assert balance0_adjusted * balance1_adjusted >= reserve0 * reserve1 * 1000000, "UniswapV2: K"
    │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value => None

note: 
    ┌─ demos/uniswap.fe:250:88
    │
250 │         assert balance0_adjusted * balance1_adjusted >= reserve0 * reserve1 * 1000000, "UniswapV2: K"
    │                                                                                        ^^^^^^^^^^^^^^ String<12>: Memory => None

note: 
    ┌─ demos/uniswap.fe:252:22
    │
252 │         self._update(balance0, balance1, reserve0, reserve1)
    │                      ^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:252:32
    │
252 │         self._update(balance0, balance1, reserve0, reserve1)
    │                                ^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:252:42
    │
252 │         self._update(balance0, balance1, reserve0, reserve1)
    │                                          ^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:252:52
    │
252 │         self._update(balance0, balance1, reserve0, reserve1)
    │                                                    ^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:252:9
    │
252 │         self._update(balance0, balance1, reserve0, reserve1)
    │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (): Value => None

note: 
    ┌─ demos/uniswap.fe:253:26
    │
253 │         emit Swap(sender=msg.sender, amount0_in, amount1_in, amount0_out, amount1_out, to)
    │                          ^^^^^^^^^^ address: Value => None

note: 
    ┌─ demos/uniswap.fe:253:38
    │
253 │         emit Swap(sender=msg.sender, amount0_in, amount1_in, amount0_out, amount1_out, to)
    │                                      ^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:253:50
    │
253 │         emit Swap(sender=msg.sender, amount0_in, amount1_in, amount0_out, amount1_out, to)
    │                                                  ^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:253:62
    │
253 │         emit Swap(sender=msg.sender, amount0_in, amount1_in, amount0_out, amount1_out, to)
    │                                                              ^^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:253:75
    │
253 │         emit Swap(sender=msg.sender, amount0_in, amount1_in, amount0_out, amount1_out, to)
    │                                                                           ^^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:253:88
    │
253 │         emit Swap(sender=msg.sender, amount0_in, amount1_in, amount0_out, amount1_out, to)
    │                                                                                        ^^ address: Value => None

note: 
    ┌─ demos/uniswap.fe:257:35
    │
257 │         let token0: ERC20 = ERC20(self.token0) # gas savings
    │                                   ^^^^^^^^^^^ address: Storage { nonce: Some(5) } => Some(Value)

note: 
    ┌─ demos/uniswap.fe:257:29
    │
257 │         let token0: ERC20 = ERC20(self.token0) # gas savings
    │                             ^^^^^^^^^^^^^^^^^^ ERC20: Value => None

note: 
    ┌─ demos/uniswap.fe:258:35
    │
258 │         let token1: ERC20 = ERC20(self.token1) # gas savings
    │                                   ^^^^^^^^^^^ address: Storage { nonce: Some(6) } => Some(Value)

note: 
    ┌─ demos/uniswap.fe:258:29
    │
258 │         let token1: ERC20 = ERC20(self.token1) # gas savings
    │                             ^^^^^^^^^^^^^^^^^^ ERC20: Value => None

note: 
    ┌─ demos/uniswap.fe:260:9
    │
260 │         token0.transfer(to, token0.balanceOf(self.address) - self.reserve0)
    │         ^^^^^^ ERC20: Value => None

note: 
    ┌─ demos/uniswap.fe:260:25
    │
260 │         token0.transfer(to, token0.balanceOf(self.address) - self.reserve0)
    │                         ^^ address: Value => None

note: 
    ┌─ demos/uniswap.fe:260:29
    │
260 │         token0.transfer(to, token0.balanceOf(self.address) - self.reserve0)
    │                             ^^^^^^ ERC20: Value => None

note: 
    ┌─ demos/uniswap.fe:260:46
    │
260 │         token0.transfer(to, token0.balanceOf(self.address) - self.reserve0)
    │                                              ^^^^^^^^^^^^ address: Value => None

note: 
    ┌─ demos/uniswap.fe:260:29
    │
260 │         token0.transfer(to, token0.balanceOf(self.address) - self.reserve0)
    │                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:260:62
    │
260 │         token0.transfer(to, token0.balanceOf(self.address) - self.reserve0)
    │                                                              ^^^^^^^^^^^^^ u256: Storage { nonce: Some(7) } => Some(Value)

note: 
    ┌─ demos/uniswap.fe:260:29
    │
260 │         token0.transfer(to, token0.balanceOf(self.address) - self.reserve0)
    │                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:260:9
    │
260 │         token0.transfer(to, token0.balanceOf(self.address) - self.reserve0)
    │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value => None

note: 
    ┌─ demos/uniswap.fe:261:9
    │
261 │         token1.transfer(to, token1.balanceOf(self.address) - self.reserve1)
    │         ^^^^^^ ERC20: Value => None

note: 
    ┌─ demos/uniswap.fe:261:25
    │
261 │         token1.transfer(to, token1.balanceOf(self.address) - self.reserve1)
    │                         ^^ address: Value => None

note: 
    ┌─ demos/uniswap.fe:261:29
    │
261 │         token1.transfer(to, token1.balanceOf(self.address) - self.reserve1)
    │                             ^^^^^^ ERC20: Value => None

note: 
    ┌─ demos/uniswap.fe:261:46
    │
261 │         token1.transfer(to, token1.balanceOf(self.address) - self.reserve1)
    │                                              ^^^^^^^^^^^^ address: Value => None

note: 
    ┌─ demos/uniswap.fe:261:29
    │
261 │         token1.transfer(to, token1.balanceOf(self.address) - self.reserve1)
    │                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:261:62
    │
261 │         token1.transfer(to, token1.balanceOf(self.address) - self.reserve1)
    │                                                              ^^^^^^^^^^^^^ u256: Storage { nonce: Some(8) } => Some(Value)

note: 
    ┌─ demos/uniswap.fe:261:29
    │
261 │         token1.transfer(to, token1.balanceOf(self.address) - self.reserve1)
    │                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:261:9
    │
261 │         token1.transfer(to, token1.balanceOf(self.address) - self.reserve1)
    │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value => None

note: 
    ┌─ demos/uniswap.fe:265:35
    │
265 │         let token0: ERC20 = ERC20(self.token0)
    │                                   ^^^^^^^^^^^ address: Storage { nonce: Some(5) } => Some(Value)

note: 
    ┌─ demos/uniswap.fe:265:29
    │
265 │         let token0: ERC20 = ERC20(self.token0)
    │                             ^^^^^^^^^^^^^^^^^^ ERC20: Value => None

note: 
    ┌─ demos/uniswap.fe:266:35
    │
266 │         let token1: ERC20 = ERC20(self.token1)
    │                                   ^^^^^^^^^^^ address: Storage { nonce: Some(6) } => Some(Value)

note: 
    ┌─ demos/uniswap.fe:266:29
    │
266 │         let token1: ERC20 = ERC20(self.token1)
    │                             ^^^^^^^^^^^^^^^^^^ ERC20: Value => None

note: 
    ┌─ demos/uniswap.fe:267:22
    │
267 │         self._update(token0.balanceOf(self.address), token1.balanceOf(self.address), self.reserve0, self.reserve1)
    │                      ^^^^^^ ERC20: Value => None

note: 
    ┌─ demos/uniswap.fe:267:39
    │
267 │         self._update(token0.balanceOf(self.address), token1.balanceOf(self.address), self.reserve0, self.reserve1)
    │                                       ^^^^^^^^^^^^ address: Value => None

note: 
    ┌─ demos/uniswap.fe:267:22
    │
267 │         self._update(token0.balanceOf(self.address), token1.balanceOf(self.address), self.reserve0, self.reserve1)
    │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:267:54
    │
267 │         self._update(token0.balanceOf(self.address), token1.balanceOf(self.address), self.reserve0, self.reserve1)
    │                                                      ^^^^^^ ERC20: Value => None

note: 
    ┌─ demos/uniswap.fe:267:71
    │
267 │         self._update(token0.balanceOf(self.address), token1.balanceOf(self.address), self.reserve0, self.reserve1)
    │                                                                       ^^^^^^^^^^^^ address: Value => None

note: 
    ┌─ demos/uniswap.fe:267:54
    │
267 │         self._update(token0.balanceOf(self.address), token1.balanceOf(self.address), self.reserve0, self.reserve1)
    │                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:267:86
    │
267 │         self._update(token0.balanceOf(self.address), token1.balanceOf(self.address), self.reserve0, self.reserve1)
    │                                                                                      ^^^^^^^^^^^^^ u256: Storage { nonce: Some(7) } => Some(Value)

note: 
    ┌─ demos/uniswap.fe:267:101
    │
267 │         self._update(token0.balanceOf(self.address), token1.balanceOf(self.address), self.reserve0, self.reserve1)
    │                                                                                                     ^^^^^^^^^^^^^ u256: Storage { nonce: Some(8) } => Some(Value)

note: 
    ┌─ demos/uniswap.fe:267:9
    │
267 │         self._update(token0.balanceOf(self.address), token1.balanceOf(self.address), self.reserve0, self.reserve1)
    │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (): Value => None

note: 
    ┌─ demos/uniswap.fe:271:13
    │
271 │         if (val > 3):
    │             ^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:271:19
    │
271 │         if (val > 3):
    │                   ^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:271:12
    │
271 │         if (val > 3):
    │            ^^^^^^^^^ bool: Value => None

note: 
    ┌─ demos/uniswap.fe:272:13
    │
272 │             z = val
    │             ^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:272:17
    │
272 │             z = val
    │                 ^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:273:27
    │
273 │             let x: u256 = val / 2 + 1
    │                           ^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:273:33
    │
273 │             let x: u256 = val / 2 + 1
    │                                 ^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:273:27
    │
273 │             let x: u256 = val / 2 + 1
    │                           ^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:273:37
    │
273 │             let x: u256 = val / 2 + 1
    │                                     ^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:273:27
    │
273 │             let x: u256 = val / 2 + 1
    │                           ^^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:274:20
    │
274 │             while (x < z):
    │                    ^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:274:24
    │
274 │             while (x < z):
    │                        ^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:274:19
    │
274 │             while (x < z):
    │                   ^^^^^^^ bool: Value => None

note: 
    ┌─ demos/uniswap.fe:275:17
    │
275 │                 z = x
    │                 ^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:275:21
    │
275 │                 z = x
    │                     ^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:276:17
    │
276 │                 x = (val / x + x) / 2
    │                 ^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:276:22
    │
276 │                 x = (val / x + x) / 2
    │                      ^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:276:28
    │
276 │                 x = (val / x + x) / 2
    │                            ^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:276:22
    │
276 │                 x = (val / x + x) / 2
    │                      ^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:276:32
    │
276 │                 x = (val / x + x) / 2
    │                                ^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:276:21
    │
276 │                 x = (val / x + x) / 2
    │                     ^^^^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:276:37
    │
276 │                 x = (val / x + x) / 2
    │                                     ^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:276:21
    │
276 │                 x = (val / x + x) / 2
    │                     ^^^^^^^^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:277:15
    │
277 │         elif (val != 0):
    │               ^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:277:22
    │
277 │         elif (val != 0):
    │                      ^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:277:14
    │
277 │         elif (val != 0):
    │              ^^^^^^^^^^ bool: Value => None

note: 
    ┌─ demos/uniswap.fe:278:13
    │
278 │             z = 1
    │             ^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:278:17
    │
278 │             z = 1
    │                 ^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:279:16
    │
279 │         return z
    │                ^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:282:21
    │
282 │         return x if x < y else y
    │                     ^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:282:25
    │
282 │         return x if x < y else y
    │                         ^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:282:21
    │
282 │         return x if x < y else y
    │                     ^^^^^ bool: Value => None

note: 
    ┌─ demos/uniswap.fe:282:16
    │
282 │         return x if x < y else y
    │                ^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:282:32
    │
282 │         return x if x < y else y
    │                                ^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:282:16
    │
282 │         return x if x < y else y
    │                ^^^^^^^^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:300:8
    │
300 │        self.fee_to_setter = fee_to_setter
    │        ^^^^^^^^^^^^^^^^^^ address: Storage { nonce: Some(1) } => None

note: 
    ┌─ demos/uniswap.fe:300:29
    │
300 │        self.fee_to_setter = fee_to_setter
    │                             ^^^^^^^^^^^^^ address: Value => None

note: 
    ┌─ demos/uniswap.fe:303:16
    │
303 │         return self.fee_to
    │                ^^^^^^^^^^^ address: Storage { nonce: Some(0) } => Some(Value)

note: 
    ┌─ demos/uniswap.fe:306:16
    │
306 │         return self.fee_to_setter
    │                ^^^^^^^^^^^^^^^^^^ address: Storage { nonce: Some(1) } => Some(Value)

note: 
    ┌─ demos/uniswap.fe:309:16
    │
309 │         return self.pair_counter
    │                ^^^^^^^^^^^^^^^^^ u256: Storage { nonce: Some(4) } => Some(Value)

note: 
    ┌─ demos/uniswap.fe:312:16
    │
312 │         assert token_a != token_b, "UniswapV2: IDENTICAL_ADDRESSES"
    │                ^^^^^^^ address: Value => None

note: 
    ┌─ demos/uniswap.fe:312:27
    │
312 │         assert token_a != token_b, "UniswapV2: IDENTICAL_ADDRESSES"
    │                           ^^^^^^^ address: Value => None

note: 
    ┌─ demos/uniswap.fe:312:16
    │
312 │         assert token_a != token_b, "UniswapV2: IDENTICAL_ADDRESSES"
    │                ^^^^^^^^^^^^^^^^^^ bool: Value => None

note: 
    ┌─ demos/uniswap.fe:312:36
    │
312 │         assert token_a != token_b, "UniswapV2: IDENTICAL_ADDRESSES"
    │                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ String<30>: Memory => None

note: 
    ┌─ demos/uniswap.fe:314:42
    │
314 │         let token0: address = token_a if token_a < token_b else token_b
    │                                          ^^^^^^^ address: Value => None

note: 
    ┌─ demos/uniswap.fe:314:52
    │
314 │         let token0: address = token_a if token_a < token_b else token_b
    │                                                    ^^^^^^^ address: Value => None

note: 
    ┌─ demos/uniswap.fe:314:42
    │
314 │         let token0: address = token_a if token_a < token_b else token_b
    │                                          ^^^^^^^^^^^^^^^^^ bool: Value => None

note: 
    ┌─ demos/uniswap.fe:314:31
    │
314 │         let token0: address = token_a if token_a < token_b else token_b
    │                               ^^^^^^^ address: Value => None

note: 
    ┌─ demos/uniswap.fe:314:65
    │
314 │         let token0: address = token_a if token_a < token_b else token_b
    │                                                                 ^^^^^^^ address: Value => None

note: 
    ┌─ demos/uniswap.fe:314:31
    │
314 │         let token0: address = token_a if token_a < token_b else token_b
    │                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ address: Value => None

note: 
    ┌─ demos/uniswap.fe:315:42
    │
315 │         let token1: address = token_a if token_a > token_b else token_b
    │                                          ^^^^^^^ address: Value => None

note: 
    ┌─ demos/uniswap.fe:315:52
    │
315 │         let token1: address = token_a if token_a > token_b else token_b
    │                                                    ^^^^^^^ address: Value => None

note: 
    ┌─ demos/uniswap.fe:315:42
    │
315 │         let token1: address = token_a if token_a > token_b else token_b
    │                                          ^^^^^^^^^^^^^^^^^ bool: Value => None

note: 
    ┌─ demos/uniswap.fe:315:31
    │
315 │         let token1: address = token_a if token_a > token_b else token_b
    │                               ^^^^^^^ address: Value => None

note: 
    ┌─ demos/uniswap.fe:315:65
    │
315 │         let token1: address = token_a if token_a > token_b else token_b
    │                                                                 ^^^^^^^ address: Value => None

note: 
    ┌─ demos/uniswap.fe:315:31
    │
315 │         let token1: address = token_a if token_a > token_b else token_b
    │                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ address: Value => None

note: 
    ┌─ demos/uniswap.fe:316:16
    │
316 │         assert token0 != address(0), "UniswapV2: ZERO_ADDRESS"
    │                ^^^^^^ address: Value => None

note: 
    ┌─ demos/uniswap.fe:316:34
    │
316 │         assert token0 != address(0), "UniswapV2: ZERO_ADDRESS"
    │                                  ^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:316:26
    │
316 │         assert token0 != address(0), "UniswapV2: ZERO_ADDRESS"
    │                          ^^^^^^^^^^ address: Value => None

note: 
    ┌─ demos/uniswap.fe:316:16
    │
316 │         assert token0 != address(0), "UniswapV2: ZERO_ADDRESS"
    │                ^^^^^^^^^^^^^^^^^^^^ bool: Value => None

note: 
    ┌─ demos/uniswap.fe:316:38
    │
316 │         assert token0 != address(0), "UniswapV2: ZERO_ADDRESS"
    │                                      ^^^^^^^^^^^^^^^^^^^^^^^^^ String<23>: Memory => None

note: 
    ┌─ demos/uniswap.fe:317:16
    │
317 │         assert self.pairs[token0][token1] == address(0), "UniswapV2: PAIR_EXISTS"
    │                ^^^^^^^^^^ Map<address, Map<address, address>>: Storage { nonce: Some(2) } => None

note: 
    ┌─ demos/uniswap.fe:317:27
    │
317 │         assert self.pairs[token0][token1] == address(0), "UniswapV2: PAIR_EXISTS"
    │                           ^^^^^^ address: Value => None

note: 
    ┌─ demos/uniswap.fe:317:16
    │
317 │         assert self.pairs[token0][token1] == address(0), "UniswapV2: PAIR_EXISTS"
    │                ^^^^^^^^^^^^^^^^^^ Map<address, address>: Storage { nonce: None } => None

note: 
    ┌─ demos/uniswap.fe:317:35
    │
317 │         assert self.pairs[token0][token1] == address(0), "UniswapV2: PAIR_EXISTS"
    │                                   ^^^^^^ address: Value => None

note: 
    ┌─ demos/uniswap.fe:317:16
    │
317 │         assert self.pairs[token0][token1] == address(0), "UniswapV2: PAIR_EXISTS"
    │                ^^^^^^^^^^^^^^^^^^^^^^^^^^ address: Storage { nonce: None } => Some(Value)

note: 
    ┌─ demos/uniswap.fe:317:54
    │
317 │         assert self.pairs[token0][token1] == address(0), "UniswapV2: PAIR_EXISTS"
    │                                                      ^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:317:46
    │
317 │         assert self.pairs[token0][token1] == address(0), "UniswapV2: PAIR_EXISTS"
    │                                              ^^^^^^^^^^ address: Value => None

note: 
    ┌─ demos/uniswap.fe:317:16
    │
317 │         assert self.pairs[token0][token1] == address(0), "UniswapV2: PAIR_EXISTS"
    │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value => None

note: 
    ┌─ demos/uniswap.fe:317:58
    │
317 │         assert self.pairs[token0][token1] == address(0), "UniswapV2: PAIR_EXISTS"
    │                                                          ^^^^^^^^^^^^^^^^^^^^^^^^ String<22>: Memory => None

note: 
    ┌─ demos/uniswap.fe:319:37
    │
319 │         let salt: u256 = keccak256((token0, token1).abi_encode())
    │                                     ^^^^^^ address: Value => None

note: 
    ┌─ demos/uniswap.fe:319:45
    │
319 │         let salt: u256 = keccak256((token0, token1).abi_encode())
    │                                             ^^^^^^ address: Value => None

note: 
    ┌─ demos/uniswap.fe:319:36
    │
319 │         let salt: u256 = keccak256((token0, token1).abi_encode())
    │                                    ^^^^^^^^^^^^^^^^ (address, address): Memory => None

note: 
    ┌─ demos/uniswap.fe:319:36
    │
319 │         let salt: u256 = keccak256((token0, token1).abi_encode())
    │                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u8[64]: Memory => None

note: 
    ┌─ demos/uniswap.fe:319:26
    │
319 │         let salt: u256 = keccak256((token0, token1).abi_encode())
    │                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:320:57
    │
320 │         let pair: UniswapV2Pair = UniswapV2Pair.create2(0, salt)
    │                                                         ^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:320:60
    │
320 │         let pair: UniswapV2Pair = UniswapV2Pair.create2(0, salt)
    │                                                            ^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:320:35
    │
320 │         let pair: UniswapV2Pair = UniswapV2Pair.create2(0, salt)
    │                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ UniswapV2Pair: Value => None

note: 
    ┌─ demos/uniswap.fe:321:9
    │
321 │         pair.initialize(token0, token1)
    │         ^^^^ UniswapV2Pair: Value => None

note: 
    ┌─ demos/uniswap.fe:321:25
    │
321 │         pair.initialize(token0, token1)
    │                         ^^^^^^ address: Value => None

note: 
    ┌─ demos/uniswap.fe:321:33
    │
321 │         pair.initialize(token0, token1)
    │                                 ^^^^^^ address: Value => None

note: 
    ┌─ demos/uniswap.fe:321:9
    │
321 │         pair.initialize(token0, token1)
    │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (): Value => None

note: 
    ┌─ demos/uniswap.fe:323:9
    │
323 │         self.pairs[token0][token1] = address(pair)
    │         ^^^^^^^^^^ Map<address, Map<address, address>>: Storage { nonce: Some(2) } => None

note: 
    ┌─ demos/uniswap.fe:323:20
    │
323 │         self.pairs[token0][token1] = address(pair)
    │                    ^^^^^^ address: Value => None

note: 
    ┌─ demos/uniswap.fe:323:9
    │
323 │         self.pairs[token0][token1] = address(pair)
    │         ^^^^^^^^^^^^^^^^^^ Map<address, address>: Storage { nonce: None } => None

note: 
    ┌─ demos/uniswap.fe:323:28
    │
323 │         self.pairs[token0][token1] = address(pair)
    │                            ^^^^^^ address: Value => None

note: 
    ┌─ demos/uniswap.fe:323:9
    │
323 │         self.pairs[token0][token1] = address(pair)
    │         ^^^^^^^^^^^^^^^^^^^^^^^^^^ address: Storage { nonce: None } => None

note: 
    ┌─ demos/uniswap.fe:323:46
    │
323 │         self.pairs[token0][token1] = address(pair)
    │                                              ^^^^ UniswapV2Pair: Value => None

note: 
    ┌─ demos/uniswap.fe:323:38
    │
323 │         self.pairs[token0][token1] = address(pair)
    │                                      ^^^^^^^^^^^^^ address: Value => None

note: 
    ┌─ demos/uniswap.fe:324:9
    │
324 │         self.pairs[token1][token0] = address(pair)
    │         ^^^^^^^^^^ Map<address, Map<address, address>>: Storage { nonce: Some(2) } => None

note: 
    ┌─ demos/uniswap.fe:324:20
    │
324 │         self.pairs[token1][token0] = address(pair)
    │                    ^^^^^^ address: Value => None

note: 
    ┌─ demos/uniswap.fe:324:9
    │
324 │         self.pairs[token1][token0] = address(pair)
    │         ^^^^^^^^^^^^^^^^^^ Map<address, address>: Storage { nonce: None } => None

note: 
    ┌─ demos/uniswap.fe:324:28
    │
324 │         self.pairs[token1][token0] = address(pair)
    │                            ^^^^^^ address: Value => None

note: 
    ┌─ demos/uniswap.fe:324:9
    │
324 │         self.pairs[token1][token0] = address(pair)
    │         ^^^^^^^^^^^^^^^^^^^^^^^^^^ address: Storage { nonce: None } => None

note: 
    ┌─ demos/uniswap.fe:324:46
    │
324 │         self.pairs[token1][token0] = address(pair)
    │                                              ^^^^ UniswapV2Pair: Value => None

note: 
    ┌─ demos/uniswap.fe:324:38
    │
324 │         self.pairs[token1][token0] = address(pair)
    │                                      ^^^^^^^^^^^^^ address: Value => None

note: 
    ┌─ demos/uniswap.fe:325:9
    │
325 │         self.all_pairs[self.pair_counter] = address(pair)
    │         ^^^^^^^^^^^^^^ address[100]: Storage { nonce: Some(3) } => None

note: 
    ┌─ demos/uniswap.fe:325:24
    │
325 │         self.all_pairs[self.pair_counter] = address(pair)
    │                        ^^^^^^^^^^^^^^^^^ u256: Storage { nonce: Some(4) } => Some(Value)

note: 
    ┌─ demos/uniswap.fe:325:9
    │
325 │         self.all_pairs[self.pair_counter] = address(pair)
    │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ address: Storage { nonce: None } => None

note: 
    ┌─ demos/uniswap.fe:325:53
    │
325 │         self.all_pairs[self.pair_counter] = address(pair)
    │                                                     ^^^^ UniswapV2Pair: Value => None

note: 
    ┌─ demos/uniswap.fe:325:45
    │
325 │         self.all_pairs[self.pair_counter] = address(pair)
    │                                             ^^^^^^^^^^^^^ address: Value => None

note: 
    ┌─ demos/uniswap.fe:326:9
    │
326 │         self.pair_counter = self.pair_counter + 1
    │         ^^^^^^^^^^^^^^^^^ u256: Storage { nonce: Some(4) } => None

note: 
    ┌─ demos/uniswap.fe:326:29
    │
326 │         self.pair_counter = self.pair_counter + 1
    │                             ^^^^^^^^^^^^^^^^^ u256: Storage { nonce: Some(4) } => Some(Value)

note: 
    ┌─ demos/uniswap.fe:326:49
    │
326 │         self.pair_counter = self.pair_counter + 1
    │                                                 ^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:326:29
    │
326 │         self.pair_counter = self.pair_counter + 1
    │                             ^^^^^^^^^^^^^^^^^^^^^ u256: Value => None

note: 
    ┌─ demos/uniswap.fe:328:26
    │
328 │         emit PairCreated(token0, token1, pair=address(pair), index=self.pair_counter)
    │                          ^^^^^^ address: Value => None

note: 
    ┌─ demos/uniswap.fe:328:34
    │
328 │         emit PairCreated(token0, token1, pair=address(pair), index=self.pair_counter)
    │                                  ^^^^^^ address: Value => None

note: 
    ┌─ demos/uniswap.fe:328:55
    │
328 │         emit PairCreated(token0, token1, pair=address(pair), index=self.pair_counter)
    │                                                       ^^^^ UniswapV2Pair: Value => None

note: 
    ┌─ demos/uniswap.fe:328:47
    │
328 │         emit PairCreated(token0, token1, pair=address(pair), index=self.pair_counter)
    │                                               ^^^^^^^^^^^^^ address: Value => None

note: 
    ┌─ demos/uniswap.fe:328:68
    │
328 │         emit PairCreated(token0, token1, pair=address(pair), index=self.pair_counter)
    │                                                                    ^^^^^^^^^^^^^^^^^ u256: Storage { nonce: Some(4) } => Some(Value)

note: 
    ┌─ demos/uniswap.fe:329:24
    │
329 │         return address(pair)
    │                        ^^^^ UniswapV2Pair: Value => None

note: 
    ┌─ demos/uniswap.fe:329:16
    │
329 │         return address(pair)
    │                ^^^^^^^^^^^^^ address: Value => None

note: 
    ┌─ demos/uniswap.fe:332:16
    │
332 │         assert msg.sender == self.fee_to_setter, "UniswapV2: FORBIDDEN"
    │                ^^^^^^^^^^ address: Value => None

note: 
    ┌─ demos/uniswap.fe:332:30
    │
332 │         assert msg.sender == self.fee_to_setter, "UniswapV2: FORBIDDEN"
    │                              ^^^^^^^^^^^^^^^^^^ address: Storage { nonce: Some(1) } => Some(Value)

note: 
    ┌─ demos/uniswap.fe:332:16
    │
332 │         assert msg.sender == self.fee_to_setter, "UniswapV2: FORBIDDEN"
    │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value => None

note: 
    ┌─ demos/uniswap.fe:332:50
    │
332 │         assert msg.sender == self.fee_to_setter, "UniswapV2: FORBIDDEN"
    │                                                  ^^^^^^^^^^^^^^^^^^^^^^ String<20>: Memory => None

note: 
    ┌─ demos/uniswap.fe:333:9
    │
333 │         self.fee_to = fee_to
    │         ^^^^^^^^^^^ address: Storage { nonce: Some(0) } => None

note: 
    ┌─ demos/uniswap.fe:333:23
    │
333 │         self.fee_to = fee_to
    │                       ^^^^^^ address: Value => None

note: 
    ┌─ demos/uniswap.fe:336:16
    │
336 │         assert msg.sender == fee_to_setter, "UniswapV2: FORBIDDEN"
    │                ^^^^^^^^^^ address: Value => None

note: 
    ┌─ demos/uniswap.fe:336:30
    │
336 │         assert msg.sender == fee_to_setter, "UniswapV2: FORBIDDEN"
    │                              ^^^^^^^^^^^^^ address: Value => None

note: 
    ┌─ demos/uniswap.fe:336:16
    │
336 │         assert msg.sender == fee_to_setter, "UniswapV2: FORBIDDEN"
    │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value => None

note: 
    ┌─ demos/uniswap.fe:336:45
    │
336 │         assert msg.sender == fee_to_setter, "UniswapV2: FORBIDDEN"
    │                                             ^^^^^^^^^^^^^^^^^^^^^^ String<20>: Memory => None

note: 
    ┌─ demos/uniswap.fe:337:9
    │
337 │         self.fee_to_setter = fee_to_setter
    │         ^^^^^^^^^^^^^^^^^^ address: Storage { nonce: Some(1) } => None

note: 
    ┌─ demos/uniswap.fe:337:30
    │
337 │         self.fee_to_setter = fee_to_setter
    │                              ^^^^^^^^^^^^^ address: Value => None

note: 
   ┌─ demos/uniswap.fe:78:9
   │
78 │         emit Transfer(from=address(0), to, value)
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attributes hash: 5533489995250141934
   │
   = Event {
         name: "Transfer",
         fields: [
             EventField {
                 name: "from",
                 typ: Ok(
                     Base(
                         Address,
                     ),
                 ),
                 is_indexed: true,
             },
             EventField {
                 name: "to",
                 typ: Ok(
                     Base(
                         Address,
                     ),
                 ),
                 is_indexed: true,
             },
             EventField {
                 name: "value",
                 typ: Ok(
                     Base(
                         Numeric(
                             U256,
                         ),
                     ),
                 ),
                 is_indexed: false,
             },
         ],
     }

note: 
   ┌─ demos/uniswap.fe:83:9
   │
83 │         emit Transfer(from, to=address(0), value)
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attributes hash: 5533489995250141934
   │
   = Event {
         name: "Transfer",
         fields: [
             EventField {
                 name: "from",
                 typ: Ok(
                     Base(
                         Address,
                     ),
                 ),
                 is_indexed: true,
             },
             EventField {
                 name: "to",
                 typ: Ok(
                     Base(
                         Address,
                     ),
                 ),
                 is_indexed: true,
             },
             EventField {
                 name: "value",
                 typ: Ok(
                     Base(
                         Numeric(
                             U256,
                         ),
                     ),
                 ),
                 is_indexed: false,
             },
         ],
     }

note: 
   ┌─ demos/uniswap.fe:87:9
   │
87 │         emit Approval(owner, spender, value)
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attributes hash: 8893313742751514912
   │
   = Event {
         name: "Approval",
         fields: [
             EventField {
                 name: "owner",
                 typ: Ok(
                     Base(
                         Address,
                     ),
                 ),
                 is_indexed: true,
             },
             EventField {
                 name: "spender",
                 typ: Ok(
                     Base(
                         Address,
                     ),
                 ),
                 is_indexed: true,
             },
             EventField {
                 name: "value",
                 typ: Ok(
                     Base(
                         Numeric(
                             U256,
                         ),
                     ),
                 ),
                 is_indexed: false,
             },
         ],
     }

note: 
   ┌─ demos/uniswap.fe:92:9
   │
92 │         emit Transfer(from, to, value)
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attributes hash: 5533489995250141934
   │
   = Event {
         name: "Transfer",
         fields: [
             EventField {
                 name: "from",
                 typ: Ok(
                     Base(
                         Address,
                     ),
                 ),
                 is_indexed: true,
             },
             EventField {
                 name: "to",
                 typ: Ok(
                     Base(
                         Address,
                     ),
                 ),
                 is_indexed: true,
             },
             EventField {
                 name: "value",
                 typ: Ok(
                     Base(
                         Numeric(
                             U256,
                         ),
                     ),
                 ),
                 is_indexed: false,
             },
         ],
     }

note: 
    ┌─ demos/uniswap.fe:135:9
    │
135 │         emit Sync(reserve0=self.reserve0, reserve1=self.reserve1)
    │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attributes hash: 11491202868117077488
    │
    = Event {
          name: "Sync",
          fields: [
              EventField {
                  name: "reserve0",
                  typ: Ok(
                      Base(
                          Numeric(
                              U256,
                          ),
                      ),
                  ),
                  is_indexed: false,
              },
              EventField {
                  name: "reserve1",
                  typ: Ok(
                      Base(
                          Numeric(
                              U256,
                          ),
                      ),
                  ),
                  is_indexed: false,
              },
          ],
      }

note: 
    ┌─ demos/uniswap.fe:184:9
    │
184 │         emit Mint(sender=msg.sender, amount0, amount1)
    │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attributes hash: 4243961805717991435
    │
    = Event {
          name: "Mint",
          fields: [
              EventField {
                  name: "sender",
                  typ: Ok(
                      Base(
                          Address,
                      ),
                  ),
                  is_indexed: true,
              },
              EventField {
                  name: "amount0",
                  typ: Ok(
                      Base(
                          Numeric(
                              U256,
                          ),
                      ),
                  ),
                  is_indexed: false,
              },
              EventField {
                  name: "amount1",
                  typ: Ok(
                      Base(
                          Numeric(
                              U256,
                          ),
                      ),
                  ),
                  is_indexed: false,
              },
          ],
      }

note: 
    ┌─ demos/uniswap.fe:213:9
    │
213 │         emit Burn(sender=msg.sender, amount0, amount1, to)
    │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attributes hash: 10738919684795162003
    │
    = Event {
          name: "Burn",
          fields: [
              EventField {
                  name: "sender",
                  typ: Ok(
                      Base(
                          Address,
                      ),
                  ),
                  is_indexed: true,
              },
              EventField {
                  name: "amount0",
                  typ: Ok(
                      Base(
                          Numeric(
                              U256,
                          ),
                      ),
                  ),
                  is_indexed: false,
              },
              EventField {
                  name: "amount1",
                  typ: Ok(
                      Base(
                          Numeric(
                              U256,
                          ),
                      ),
                  ),
                  is_indexed: false,
              },
              EventField {
                  name: "to",
                  typ: Ok(
                      Base(
                          Address,
                      ),
                  ),
                  is_indexed: true,
              },
          ],
      }

note: 
    ┌─ demos/uniswap.fe:253:9
    │
253 │         emit Swap(sender=msg.sender, amount0_in, amount1_in, amount0_out, amount1_out, to)
    │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attributes hash: 16055667627771619025
    │
    = Event {
          name: "Swap",
          fields: [
              EventField {
                  name: "sender",
                  typ: Ok(
                      Base(
                          Address,
                      ),
                  ),
                  is_indexed: true,
              },
              EventField {
                  name: "amount0_in",
                  typ: Ok(
                      Base(
                          Numeric(
                              U256,
                          ),
                      ),
                  ),
                  is_indexed: false,
              },
              EventField {
                  name: "amount1_in",
                  typ: Ok(
                      Base(
                          Numeric(
                              U256,
                          ),
                      ),
                  ),
                  is_indexed: false,
              },
              EventField {
                  name: "amount0_out",
                  typ: Ok(
                      Base(
                          Numeric(
                              U256,
                          ),
                      ),
                  ),
                  is_indexed: false,
              },
              EventField {
                  name: "amount1_out",
                  typ: Ok(
                      Base(
                          Numeric(
                              U256,
                          ),
                      ),
                  ),
                  is_indexed: false,
              },
              EventField {
                  name: "to",
                  typ: Ok(
                      Base(
                          Address,
                      ),
                  ),
                  is_indexed: true,
              },
          ],
      }

note: 
    ┌─ demos/uniswap.fe:328:9
    │
328 │         emit PairCreated(token0, token1, pair=address(pair), index=self.pair_counter)
    │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attributes hash: 13094055123344570742
    │
    = Event {
          name: "PairCreated",
          fields: [
              EventField {
                  name: "token0",
                  typ: Ok(
                      Base(
                          Address,
                      ),
                  ),
                  is_indexed: true,
              },
              EventField {
                  name: "token1",
                  typ: Ok(
                      Base(
                          Address,
                      ),
                  ),
                  is_indexed: true,
              },
              EventField {
                  name: "pair",
                  typ: Ok(
                      Base(
                          Address,
                      ),
                  ),
                  is_indexed: false,
              },
              EventField {
                  name: "index",
                  typ: Ok(
                      Base(
                          Numeric(
                              U256,
                          ),
                      ),
                  ),
                  is_indexed: false,
              },
          ],
      }

note: 
    ┌─ demos/uniswap.fe:124:30
    │
124 │         let block_timestamp: u256 = block.timestamp % 2**32
    │                              ^^^^ u256

note: 
    ┌─ demos/uniswap.fe:126:27
    │
126 │         let time_elapsed: u256 = block_timestamp - self.block_timestamp_last # overflow is desired
    │                           ^^^^ u256

note: 
    ┌─ demos/uniswap.fe:139:21
    │
139 │         let fee_to: address = UniswapV2Factory(self.factory).fee_to()
    │                     ^^^^^^^ address

note: 
    ┌─ demos/uniswap.fe:140:21
    │
140 │         let fee_on: bool = fee_to != address(0)
    │                     ^^^^ bool

note: 
    ┌─ demos/uniswap.fe:141:21
    │
141 │         let k_last: u256 = self.k_last # gas savings
    │                     ^^^^ u256

note: 
    ┌─ demos/uniswap.fe:144:29
    │
144 │                 let root_k: u256 = sqrt(reserve0 * reserve1)
    │                             ^^^^ u256

note: 
    ┌─ demos/uniswap.fe:145:34
    │
145 │                 let root_k_last: u256 = sqrt(k_last)
    │                                  ^^^^ u256

note: 
    ┌─ demos/uniswap.fe:147:36
    │
147 │                     let numerator: u256 = self.total_supply * root_k - root_k_last
    │                                    ^^^^ u256

note: 
    ┌─ demos/uniswap.fe:148:38
    │
148 │                     let denominator: u256 = root_k * 5 + root_k_last
    │                                      ^^^^ u256

note: 
    ┌─ demos/uniswap.fe:149:36
    │
149 │                     let liquidity: u256 = numerator / denominator
    │                                    ^^^^ u256

note: 
    ┌─ demos/uniswap.fe:159:32
    │
159 │         let MINIMUM_LIQUIDITY: u256 = 1000
    │                                ^^^^ u256

note: 
    ┌─ demos/uniswap.fe:160:23
    │
160 │         let reserve0: u256 = self.reserve0
    │                       ^^^^ u256

note: 
    ┌─ demos/uniswap.fe:161:23
    │
161 │         let reserve1: u256 = self.reserve1
    │                       ^^^^ u256

note: 
    ┌─ demos/uniswap.fe:162:23
    │
162 │         let balance0: u256 = ERC20(self.token0).balanceOf(self.address)
    │                       ^^^^ u256

note: 
    ┌─ demos/uniswap.fe:163:23
    │
163 │         let balance1: u256 = ERC20(self.token1).balanceOf(self.address)
    │                       ^^^^ u256

note: 
    ┌─ demos/uniswap.fe:164:22
    │
164 │         let amount0: u256 = balance0 - self.reserve0
    │                      ^^^^ u256

note: 
    ┌─ demos/uniswap.fe:165:22
    │
165 │         let amount1: u256 = balance1 - self.reserve1
    │                      ^^^^ u256

note: 
    ┌─ demos/uniswap.fe:167:21
    │
167 │         let fee_on: bool = self._mint_fee(reserve0, reserve1)
    │                     ^^^^ bool

note: 
    ┌─ demos/uniswap.fe:168:27
    │
168 │         let total_supply: u256 = self.total_supply # gas savings, must be defined here since totalSupply can update in _mintFee
    │                           ^^^^ u256

note: 
    ┌─ demos/uniswap.fe:169:24
    │
169 │         let liquidity: u256 = 0
    │                        ^^^^ u256

note: 
    ┌─ demos/uniswap.fe:189:23
    │
189 │         let reserve0: u256 = self.reserve0
    │                       ^^^^ u256

note: 
    ┌─ demos/uniswap.fe:190:23
    │
190 │         let reserve1: u256 = self.reserve1
    │                       ^^^^ u256

note: 
    ┌─ demos/uniswap.fe:191:21
    │
191 │         let token0: ERC20 = ERC20(self.token0)
    │                     ^^^^^ ERC20

note: 
    ┌─ demos/uniswap.fe:192:21
    │
192 │         let token1: ERC20 = ERC20(self.token1)
    │                     ^^^^^ ERC20

note: 
    ┌─ demos/uniswap.fe:193:23
    │
193 │         let balance0: u256 = token0.balanceOf(self.address)
    │                       ^^^^ u256

note: 
    ┌─ demos/uniswap.fe:194:23
    │
194 │         let balance1: u256 = token1.balanceOf(self.address)
    │                       ^^^^ u256

note: 
    ┌─ demos/uniswap.fe:195:24
    │
195 │         let liquidity: u256 = self.balances[self.address]
    │                        ^^^^ u256

note: 
    ┌─ demos/uniswap.fe:197:21
    │
197 │         let fee_on: bool = self._mint_fee(reserve0, reserve1)
    │                     ^^^^ bool

note: 
    ┌─ demos/uniswap.fe:198:27
    │
198 │         let total_supply: u256 = self.total_supply # gas savings, must be defined here since total_supply can update in _mintFee
    │                           ^^^^ u256

note: 
    ┌─ demos/uniswap.fe:199:22
    │
199 │         let amount0: u256 = (liquidity * balance0) / total_supply # using balances ensures pro-rata distribution
    │                      ^^^^ u256

note: 
    ┌─ demos/uniswap.fe:200:22
    │
200 │         let amount1: u256 = (liquidity * balance1) / total_supply # using balances ensures pro-rata distribution
    │                      ^^^^ u256

note: 
    ┌─ demos/uniswap.fe:221:23
    │
221 │         let reserve0: u256 = self.reserve0
    │                       ^^^^ u256

note: 
    ┌─ demos/uniswap.fe:222:23
    │
222 │         let reserve1: u256 = self.reserve1
    │                       ^^^^ u256

note: 
    ┌─ demos/uniswap.fe:225:21
    │
225 │         let token0: ERC20 = ERC20(self.token0)
    │                     ^^^^^ ERC20

note: 
    ┌─ demos/uniswap.fe:226:21
    │
226 │         let token1: ERC20 = ERC20(self.token1)
    │                     ^^^^^ ERC20

note: 
    ┌─ demos/uniswap.fe:239:23
    │
239 │         let balance0: u256 = token0.balanceOf(self.address)
    │                       ^^^^ u256

note: 
    ┌─ demos/uniswap.fe:240:23
    │
240 │         let balance1: u256 = token1.balanceOf(self.address)
    │                       ^^^^ u256

note: 
    ┌─ demos/uniswap.fe:242:25
    │
242 │         let amount0_in: u256 = balance0 - (reserve0 - amount0_out) if balance0 > reserve0 - amount0_out else 0
    │                         ^^^^ u256

note: 
    ┌─ demos/uniswap.fe:243:25
    │
243 │         let amount1_in: u256 = balance1 - (reserve1 - amount1_out) if balance1 > reserve1 - amount1_out else 0
    │                         ^^^^ u256

note: 
    ┌─ demos/uniswap.fe:247:32
    │
247 │         let balance0_adjusted: u256 = balance0 * 1000 - amount0_in * 3
    │                                ^^^^ u256

note: 
    ┌─ demos/uniswap.fe:248:32
    │
248 │         let balance1_adjusted: u256 = balance1 * 1000 - amount1_in * 3
    │                                ^^^^ u256

note: 
    ┌─ demos/uniswap.fe:257:21
    │
257 │         let token0: ERC20 = ERC20(self.token0) # gas savings
    │                     ^^^^^ ERC20

note: 
    ┌─ demos/uniswap.fe:258:21
    │
258 │         let token1: ERC20 = ERC20(self.token1) # gas savings
    │                     ^^^^^ ERC20

note: 
    ┌─ demos/uniswap.fe:265:21
    │
265 │         let token0: ERC20 = ERC20(self.token0)
    │                     ^^^^^ ERC20

note: 
    ┌─ demos/uniswap.fe:266:21
    │
266 │         let token1: ERC20 = ERC20(self.token1)
    │                     ^^^^^ ERC20

note: 
    ┌─ demos/uniswap.fe:270:16
    │
270 │         let z: u256
    │                ^^^^ u256

note: 
    ┌─ demos/uniswap.fe:273:20
    │
273 │             let x: u256 = val / 2 + 1
    │                    ^^^^ u256

note: 
    ┌─ demos/uniswap.fe:314:21
    │
314 │         let token0: address = token_a if token_a < token_b else token_b
    │                     ^^^^^^^ address

note: 
    ┌─ demos/uniswap.fe:315:21
    │
315 │         let token1: address = token_a if token_a > token_b else token_b
    │                     ^^^^^^^ address

note: 
    ┌─ demos/uniswap.fe:319:19
    │
319 │         let salt: u256 = keccak256((token0, token1).abi_encode())
    │                   ^^^^ u256

note: 
    ┌─ demos/uniswap.fe:320:19
    │
320 │         let pair: UniswapV2Pair = UniswapV2Pair.create2(0, salt)
    │                   ^^^^^^^^^^^^^ UniswapV2Pair

note: 
   ┌─ demos/uniswap.fe:78:28
   │
78 │         emit Transfer(from=address(0), to, value)
   │                            ^^^^^^^ attributes hash: 14203407709342965641
   │
   = TypeConstructor {
         typ: Base(
             Address,
         ),
     }

note: 
   ┌─ demos/uniswap.fe:83:32
   │
83 │         emit Transfer(from, to=address(0), value)
   │                                ^^^^^^^ attributes hash: 14203407709342965641
   │
   = TypeConstructor {
         typ: Base(
             Address,
         ),
     }

note: 
   ┌─ demos/uniswap.fe:95:9
   │
95 │         self._approve(msg.sender, spender, value)
   │         ^^^^^^^^^^^^^ attributes hash: 10018161393539106403
   │
   = SelfAttribute {
         func_name: "_approve",
         self_span: Span {
             start: 2409,
             end: 2413,
         },
     }

note: 
   ┌─ demos/uniswap.fe:99:9
   │
99 │         self._transfer(msg.sender, to, value)
   │         ^^^^^^^^^^^^^^ attributes hash: 10093895704938982127
   │
   = SelfAttribute {
         func_name: "_transfer",
         self_span: Span {
             start: 2541,
             end: 2545,
         },
     }

note: 
    ┌─ demos/uniswap.fe:106:9
    │
106 │         self._transfer(from, to, value)
    │         ^^^^^^^^^^^^^^ attributes hash: 12907935190801646102
    │
    = SelfAttribute {
          func_name: "_transfer",
          self_span: Span {
              start: 2833,
              end: 2837,
          },
      }

note: 
    ┌─ demos/uniswap.fe:139:31
    │
139 │         let fee_to: address = UniswapV2Factory(self.factory).fee_to()
    │                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attributes hash: 15856680294290209687
    │
    = ValueAttribute

note: 
    ┌─ demos/uniswap.fe:139:31
    │
139 │         let fee_to: address = UniswapV2Factory(self.factory).fee_to()
    │                               ^^^^^^^^^^^^^^^^ attributes hash: 6793491359790860355
    │
    = TypeConstructor {
          typ: Contract(
              Contract {
                  name: "UniswapV2Factory",
                  id: ContractId(
                      2,
                  ),
              },
          ),
      }

note: 
    ┌─ demos/uniswap.fe:140:38
    │
140 │         let fee_on: bool = fee_to != address(0)
    │                                      ^^^^^^^ attributes hash: 14203407709342965641
    │
    = TypeConstructor {
          typ: Base(
              Address,
          ),
      }

note: 
    ┌─ demos/uniswap.fe:144:36
    │
144 │                 let root_k: u256 = sqrt(reserve0 * reserve1)
    │                                    ^^^^ attributes hash: 4659268320881850436
    │
    = PureFunction(
          FunctionId(
              23,
          ),
      )

note: 
    ┌─ demos/uniswap.fe:145:41
    │
145 │                 let root_k_last: u256 = sqrt(k_last)
    │                                         ^^^^ attributes hash: 4659268320881850436
    │
    = PureFunction(
          FunctionId(
              23,
          ),
      )

note: 
    ┌─ demos/uniswap.fe:151:25
    │
151 │                         self._mint(fee_to, liquidity)
    │                         ^^^^^^^^^^ attributes hash: 5774063433734111386
    │
    = SelfAttribute {
          func_name: "_mint",
          self_span: Span {
              start: 5111,
              end: 5115,
          },
      }

note: 
    ┌─ demos/uniswap.fe:162:30
    │
162 │         let balance0: u256 = ERC20(self.token0).balanceOf(self.address)
    │                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attributes hash: 15856680294290209687
    │
    = ValueAttribute

note: 
    ┌─ demos/uniswap.fe:162:30
    │
162 │         let balance0: u256 = ERC20(self.token0).balanceOf(self.address)
    │                              ^^^^^ attributes hash: 8534973420157135002
    │
    = TypeConstructor {
          typ: Contract(
              Contract {
                  name: "ERC20",
                  id: ContractId(
                      0,
                  ),
              },
          ),
      }

note: 
    ┌─ demos/uniswap.fe:163:30
    │
163 │         let balance1: u256 = ERC20(self.token1).balanceOf(self.address)
    │                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ attributes hash: 15856680294290209687
    │
    = ValueAttribute

note: 
    ┌─ demos/uniswap.fe:163:30
    │
163 │         let balance1: u256 = ERC20(self.token1).balanceOf(self.address)
    │                              ^^^^^ attributes hash: 8534973420157135002
    │
    = TypeConstructor {
          typ: Contract(
              Contract {
                  name: "ERC20",
                  id: ContractId(
                      0,
                  ),
              },
          ),
      }

note: 
    ┌─ demos/uniswap.fe:167:28
    │
167 │         let fee_on: bool = self._mint_fee(reserve0, reserve1)
    │                            ^^^^^^^^^^^^^^ attributes hash: 5706709587227470482
    │
    = SelfAttribute {
          func_name: "_mint_fee",
          self_span: Span {
              start: 5772,
              end: 5776,
          },
      }

note: 
    ┌─ demos/uniswap.fe:171:25
    │
171 │             liquidity = sqrt(amount0 * amount1) - MINIMUM_LIQUIDITY
    │                         ^^^^ attributes hash: 4659268320881850436
    │
    = PureFunction(
          FunctionId(
              23,
          ),
      )

note: 
    ┌─ demos/uniswap.fe:172:13
    │
172 │             self._mint(address(0), MINIMUM_LIQUIDITY) # permanently lock the first MINIMUM_LIQUIDITY tokens
    │             ^^^^^^^^^^ attributes hash: 1138819520748010179
    │
    = SelfAttribute {
          func_name: "_mint",
          self_span: Span {
              start: 6077,
              end: 6081,
          },
      }

note: 
    ┌─ demos/uniswap.fe:172:24
    │
172 │             self._mint(address(0), MINIMUM_LIQUIDITY) # permanently lock the first MINIMUM_LIQUIDITY tokens
    │                        ^^^^^^^ attributes hash: 14203407709342965641
    │
    = TypeConstructor {
          typ: Base(
              Address,
          ),
      }

note: 
    ┌─ demos/uniswap.fe:174:25
    │
174 │             liquidity = min((amount0 * total_supply) / reserve0, (amount1 * total_supply) / reserve1)
    │                         ^^^ attributes hash: 1603704326590615486
    │
    = PureFunction(
          FunctionId(
              24,
          ),
      )

note: 
    ┌─ demos/uniswap.fe:178:9
    │
178 │         self._mint(to, liquidity)
    │         ^^^^^^^^^^ attributes hash: 11733924240468847297
    │
    = SelfAttribute {
          func_name: "_mint",
          self_span: Span {
              start: 6372,
              end: 6376,
          },
      }

note: 
    ┌─ demos/uniswap.fe:179:9
    │
179 │         self._update(balance0, balance1, reserve0, reserve1)
    │         ^^^^^^^^^^^^ attributes hash: 13255950405190274570
    │
    = SelfAttribute {
          func_name: "_update",
          self_span: Span {
              start: 6406,
              end: 6410,
          },
      }

note: 
    ┌─ demos/uniswap.fe:191:29
    │
191 │         let token0: ERC20 = ERC20(self.token0)
    │                             ^^^^^ attributes hash: 8534973420157135002
    │
    = TypeConstructor {
          typ: Contract(
              Contract {
                  name: "ERC20",
                  id: ContractId(
                      0,
                  ),
              },
          ),
      }

note: 
    ┌─ demos/uniswap.fe:192:29
    │
192 │         let token1: ERC20 = ERC20(self.token1)
    │                             ^^^^^ attributes hash: 8534973420157135002
    │
    = TypeConstructor {
          typ: Contract(
              Contract {
                  name: "ERC20",
                  id: ContractId(
                      0,
                  ),
              },
          ),
      }

note: 
    ┌─ demos/uniswap.fe:193:30
    │
193 │         let balance0: u256 = token0.balanceOf(self.address)
    │                              ^^^^^^^^^^^^^^^^ attributes hash: 15856680294290209687
    │
    = ValueAttribute

note: 
    ┌─ demos/uniswap.fe:194:30
    │
194 │         let balance1: u256 = token1.balanceOf(self.address)
    │                              ^^^^^^^^^^^^^^^^ attributes hash: 15856680294290209687
    │
    = ValueAttribute

note: 
    ┌─ demos/uniswap.fe:197:28
    │
197 │         let fee_on: bool = self._mint_fee(reserve0, reserve1)
    │                            ^^^^^^^^^^^^^^ attributes hash: 5536339678205451361
    │
    = SelfAttribute {
          func_name: "_mint_fee",
          self_span: Span {
              start: 7186,
              end: 7190,
          },
      }

note: 
    ┌─ demos/uniswap.fe:202:9
    │
202 │         self._burn(self.address, liquidity)
    │         ^^^^^^^^^^ attributes hash: 4813635634628659472
    │
    = SelfAttribute {
          func_name: "_burn",
          self_span: Span {
              start: 7671,
              end: 7675,
          },
      }

note: 
    ┌─ demos/uniswap.fe:203:9
    │
203 │         token0.transfer(to, amount0)
    │         ^^^^^^^^^^^^^^^ attributes hash: 15856680294290209687
    │
    = ValueAttribute

note: 
    ┌─ demos/uniswap.fe:204:9
    │
204 │         token1.transfer(to, amount1)
    │         ^^^^^^^^^^^^^^^ attributes hash: 15856680294290209687
    │
    = ValueAttribute

note: 
    ┌─ demos/uniswap.fe:205:20
    │
205 │         balance0 = token0.balanceOf(self.address)
    │                    ^^^^^^^^^^^^^^^^ attributes hash: 15856680294290209687
    │
    = ValueAttribute

note: 
    ┌─ demos/uniswap.fe:206:20
    │
206 │         balance1 = token1.balanceOf(self.address)
    │                    ^^^^^^^^^^^^^^^^ attributes hash: 15856680294290209687
    │
    = ValueAttribute

note: 
    ┌─ demos/uniswap.fe:208:9
    │
208 │         self._update(balance0, balance1, reserve0, reserve1)
    │         ^^^^^^^^^^^^ attributes hash: 15351211589753982846
    │
    = SelfAttribute {
          func_name: "_update",
          self_span: Span {
              start: 7890,
              end: 7894,
          },
      }

note: 
    ┌─ demos/uniswap.fe:225:29
    │
225 │         let token0: ERC20 = ERC20(self.token0)
    │                             ^^^^^ attributes hash: 8534973420157135002
    │
    = TypeConstructor {
          typ: Contract(
              Contract {
                  name: "ERC20",
                  id: ContractId(
                      0,
                  ),
              },
          ),
      }

note: 
    ┌─ demos/uniswap.fe:226:29
    │
226 │         let token1: ERC20 = ERC20(self.token1)
    │                             ^^^^^ attributes hash: 8534973420157135002
    │
    = TypeConstructor {
          typ: Contract(
              Contract {
                  name: "ERC20",
                  id: ContractId(
                      0,
                  ),
              },
          ),
      }

note: 
    ┌─ demos/uniswap.fe:229:22
    │
229 │         assert to != address(token0) and to != address(token1), "UniswapV2: INVALID_TO"
    │                      ^^^^^^^ attributes hash: 14203407709342965641
    │
    = TypeConstructor {
          typ: Base(
              Address,
          ),
      }

note: 
    ┌─ demos/uniswap.fe:229:48
    │
229 │         assert to != address(token0) and to != address(token1), "UniswapV2: INVALID_TO"
    │                                                ^^^^^^^ attributes hash: 14203407709342965641
    │
    = TypeConstructor {
          typ: Base(
              Address,
          ),
      }

note: 
    ┌─ demos/uniswap.fe:232:13
    │
232 │             token0.transfer(to, amount0_out) # optimistically transfer tokens
    │             ^^^^^^^^^^^^^^^ attributes hash: 15856680294290209687
    │
    = ValueAttribute

note: 
    ┌─ demos/uniswap.fe:234:13
    │
234 │             token1.transfer(to, amount1_out) # optimistically transfer tokens
    │             ^^^^^^^^^^^^^^^ attributes hash: 15856680294290209687
    │
    = ValueAttribute

note: 
    ┌─ demos/uniswap.fe:239:30
    │
239 │         let balance0: u256 = token0.balanceOf(self.address)
    │                              ^^^^^^^^^^^^^^^^ attributes hash: 15856680294290209687
    │
    = ValueAttribute

note: 
    ┌─ demos/uniswap.fe:240:30
    │
240 │         let balance1: u256 = token1.balanceOf(self.address)
    │                              ^^^^^^^^^^^^^^^^ attributes hash: 15856680294290209687
    │
    = ValueAttribute

note: 
    ┌─ demos/uniswap.fe:252:9
    │
252 │         self._update(balance0, balance1, reserve0, reserve1)
    │         ^^^^^^^^^^^^ attributes hash: 5918725660327764465
    │
    = SelfAttribute {
          func_name: "_update",
          self_span: Span {
              start: 10100,
              end: 10104,
          },
      }

note: 
    ┌─ demos/uniswap.fe:257:29
    │
257 │         let token0: ERC20 = ERC20(self.token0) # gas savings
    │                             ^^^^^ attributes hash: 8534973420157135002
    │
    = TypeConstructor {
          typ: Contract(
              Contract {
                  name: "ERC20",
                  id: ContractId(
                      0,
                  ),
              },
          ),
      }

note: 
    ┌─ demos/uniswap.fe:258:29
    │
258 │         let token1: ERC20 = ERC20(self.token1) # gas savings
    │                             ^^^^^ attributes hash: 8534973420157135002
    │
    = TypeConstructor {
          typ: Contract(
              Contract {
                  name: "ERC20",
                  id: ContractId(
                      0,
                  ),
              },
          ),
      }

note: 
    ┌─ demos/uniswap.fe:260:9
    │
260 │         token0.transfer(to, token0.balanceOf(self.address) - self.reserve0)
    │         ^^^^^^^^^^^^^^^ attributes hash: 15856680294290209687
    │
    = ValueAttribute

note: 
    ┌─ demos/uniswap.fe:260:29
    │
260 │         token0.transfer(to, token0.balanceOf(self.address) - self.reserve0)
    │                             ^^^^^^^^^^^^^^^^ attributes hash: 15856680294290209687
    │
    = ValueAttribute

note: 
    ┌─ demos/uniswap.fe:261:9
    │
261 │         token1.transfer(to, token1.balanceOf(self.address) - self.reserve1)
    │         ^^^^^^^^^^^^^^^ attributes hash: 15856680294290209687
    │
    = ValueAttribute

note: 
    ┌─ demos/uniswap.fe:261:29
    │
261 │         token1.transfer(to, token1.balanceOf(self.address) - self.reserve1)
    │                             ^^^^^^^^^^^^^^^^ attributes hash: 15856680294290209687
    │
    = ValueAttribute

note: 
    ┌─ demos/uniswap.fe:265:29
    │
265 │         let token0: ERC20 = ERC20(self.token0)
    │                             ^^^^^ attributes hash: 8534973420157135002
    │
    = TypeConstructor {
          typ: Contract(
              Contract {
                  name: "ERC20",
                  id: ContractId(
                      0,
                  ),
              },
          ),
      }

note: 
    ┌─ demos/uniswap.fe:266:29
    │
266 │         let token1: ERC20 = ERC20(self.token1)
    │                             ^^^^^ attributes hash: 8534973420157135002
    │
    = TypeConstructor {
          typ: Contract(
              Contract {
                  name: "ERC20",
                  id: ContractId(
                      0,
                  ),
              },
          ),
      }

note: 
    ┌─ demos/uniswap.fe:267:9
    │
267 │         self._update(token0.balanceOf(self.address), token1.balanceOf(self.address), self.reserve0, self.reserve1)
    │         ^^^^^^^^^^^^ attributes hash: 15796683777521125666
    │
    = SelfAttribute {
          func_name: "_update",
          self_span: Span {
              start: 10760,
              end: 10764,
          },
      }

note: 
    ┌─ demos/uniswap.fe:267:22
    │
267 │         self._update(token0.balanceOf(self.address), token1.balanceOf(self.address), self.reserve0, self.reserve1)
    │                      ^^^^^^^^^^^^^^^^ attributes hash: 15856680294290209687
    │
    = ValueAttribute

note: 
    ┌─ demos/uniswap.fe:267:54
    │
267 │         self._update(token0.balanceOf(self.address), token1.balanceOf(self.address), self.reserve0, self.reserve1)
    │                                                      ^^^^^^^^^^^^^^^^ attributes hash: 15856680294290209687
    │
    = ValueAttribute

note: 
    ┌─ demos/uniswap.fe:316:26
    │
316 │         assert token0 != address(0), "UniswapV2: ZERO_ADDRESS"
    │                          ^^^^^^^ attributes hash: 14203407709342965641
    │
    = TypeConstructor {
          typ: Base(
              Address,
          ),
      }

note: 
    ┌─ demos/uniswap.fe:317:46
    │
317 │         assert self.pairs[token0][token1] == address(0), "UniswapV2: PAIR_EXISTS"
    │                                              ^^^^^^^ attributes hash: 14203407709342965641
    │
    = TypeConstructor {
          typ: Base(
              Address,
          ),
      }

note: 
    ┌─ demos/uniswap.fe:319:26
    │
319 │         let salt: u256 = keccak256((token0, token1).abi_encode())
    │                          ^^^^^^^^^ attributes hash: 3985281278010092305
    │
    = BuiltinFunction(
          Keccak256,
      )

note: 
    ┌─ demos/uniswap.fe:319:36
    │
319 │         let salt: u256 = keccak256((token0, token1).abi_encode())
    │                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^ attributes hash: 15856680294290209687
    │
    = ValueAttribute

note: 
    ┌─ demos/uniswap.fe:320:35
    │
320 │         let pair: UniswapV2Pair = UniswapV2Pair.create2(0, salt)
    │                                   ^^^^^^^^^^^^^^^^^^^^^ attributes hash: 13487454703654049111
    │
    = TypeAttribute {
          typ: Contract(
              Contract {
                  name: "UniswapV2Pair",
                  id: ContractId(
                      1,
                  ),
              },
          ),
          func_name: "create2",
      }

note: 
    ┌─ demos/uniswap.fe:321:9
    │
321 │         pair.initialize(token0, token1)
    │         ^^^^^^^^^^^^^^^ attributes hash: 15856680294290209687
    │
    = ValueAttribute

note: 
    ┌─ demos/uniswap.fe:323:38
    │
323 │         self.pairs[token0][token1] = address(pair)
    │                                      ^^^^^^^ attributes hash: 14203407709342965641
    │
    = TypeConstructor {
          typ: Base(
              Address,
          ),
      }

note: 
    ┌─ demos/uniswap.fe:324:38
    │
324 │         self.pairs[token1][token0] = address(pair)
    │                                      ^^^^^^^ attributes hash: 14203407709342965641
    │
    = TypeConstructor {
          typ: Base(
              Address,
          ),
      }

note: 
    ┌─ demos/uniswap.fe:325:45
    │
325 │         self.all_pairs[self.pair_counter] = address(pair)
    │                                             ^^^^^^^ attributes hash: 14203407709342965641
    │
    = TypeConstructor {
          typ: Base(
              Address,
          ),
      }

note: 
    ┌─ demos/uniswap.fe:328:47
    │
328 │         emit PairCreated(token0, token1, pair=address(pair), index=self.pair_counter)
    │                                               ^^^^^^^ attributes hash: 14203407709342965641
    │
    = TypeConstructor {
          typ: Base(
              Address,
          ),
      }

note: 
    ┌─ demos/uniswap.fe:329:16
    │
329 │         return address(pair)
    │                ^^^^^^^ attributes hash: 14203407709342965641
    │
    = TypeConstructor {
          typ: Base(
              Address,
          ),
      }


