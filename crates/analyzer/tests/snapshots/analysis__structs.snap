---
source: crates/analyzer/tests/analysis.rs
expression: "build_snapshot(\"features/structs.fe\", &src, module, &db)"

---
note: 
  ┌─ features/structs.fe:2:5
  │
2 │     price: u256
  │     ^^^^^^^^^^^ u256

note: 
  ┌─ features/structs.fe:3:5
  │
3 │     size: u256
  │     ^^^^^^^^^^ u256

note: 
  ┌─ features/structs.fe:4:5
  │
4 │     rooms: u8
  │     ^^^^^^^^^ u8

note: 
  ┌─ features/structs.fe:5:5
  │
5 │     vacant: bool
  │     ^^^^^^^^^^^^ bool

note: 
  ┌─ features/structs.fe:8:5
  │
8 │     my_house: House
  │     ^^^^^^^^^^^^^^^ House

note: 
   ┌─ features/structs.fe:10:5
   │  
10 │ ╭     pub fn create_house(self):
11 │ │         self.my_house = House(
12 │ │             price=1,
13 │ │             size=2,
   · │
41 │ │         assert self.my_house.rooms == u8(100)
42 │ │         assert self.my_house.vacant
   │ ╰───────────────────────────────────^ attributes hash: 4369441865732737140
   │  
   = FunctionSignature {
         self_decl: Mutable,
         params: [],
         return_type: Ok(
             Base(
                 Unit,
             ),
         ),
     }

note: 
   ┌─ features/structs.fe:44:5
   │  
44 │ ╭     pub fn bar() -> u256:
45 │ │         let building: House = House(
46 │ │             price=300,
47 │ │             size=500,
   · │
64 │ │         assert building.rooms == u8(10)
65 │ │         return building.size
   │ ╰────────────────────────────^ attributes hash: 17979516652885443340
   │  
   = FunctionSignature {
         self_decl: None,
         params: [],
         return_type: Ok(
             Base(
                 Numeric(
                     U256,
                 ),
             ),
         ),
     }

note: 
   ┌─ features/structs.fe:67:5
   │  
67 │ ╭     pub fn encode_house() -> u8[128]:
68 │ │         let house: House = House(
69 │ │             price=300,
70 │ │             size=500,
   · │
73 │ │         )
74 │ │         return house.abi_encode()
   │ ╰─────────────────────────────────^ attributes hash: 6092146250611764360
   │  
   = FunctionSignature {
         self_decl: None,
         params: [],
         return_type: Ok(
             Array(
                 Array {
                     size: 128,
                     inner: Numeric(
                         U8,
                     ),
                 },
             ),
         ),
     }

note: 
   ┌─ features/structs.fe:76:5
   │  
76 │ ╭     pub fn hashed_house() -> u256:
77 │ │         let house: House = House(
78 │ │             price=300,
79 │ │             size=500,
   · │
82 │ │         )
83 │ │         return keccak256(house.abi_encode())
   │ ╰────────────────────────────────────────────^ attributes hash: 17979516652885443340
   │  
   = FunctionSignature {
         self_decl: None,
         params: [],
         return_type: Ok(
             Base(
                 Numeric(
                     U256,
                 ),
             ),
         ),
     }

note: 
   ┌─ features/structs.fe:11:9
   │
11 │         self.my_house = House(
   │         ^^^^^^^^^^^^^ House: Storage { nonce: Some(0) } => None

note: 
   ┌─ features/structs.fe:12:19
   │
12 │             price=1,
   │                   ^ u256: Value => None

note: 
   ┌─ features/structs.fe:13:18
   │
13 │             size=2,
   │                  ^ u256: Value => None

note: 
   ┌─ features/structs.fe:14:22
   │
14 │             rooms=u8(5),
   │                      ^ u8: Value => None

note: 
   ┌─ features/structs.fe:14:19
   │
14 │             rooms=u8(5),
   │                   ^^^^^ u8: Value => None

note: 
   ┌─ features/structs.fe:15:20
   │
15 │             vacant=false
   │                    ^^^^^ bool: Value => None

note: 
   ┌─ features/structs.fe:11:25
   │  
11 │           self.my_house = House(
   │ ╭─────────────────────────^
12 │ │             price=1,
13 │ │             size=2,
14 │ │             rooms=u8(5),
15 │ │             vacant=false
16 │ │         )
   │ ╰─────────^ House: Memory => None

note: 
   ┌─ features/structs.fe:17:16
   │
17 │         assert self.my_house.price == 1
   │                ^^^^^^^^^^^^^ House: Storage { nonce: Some(0) } => None

note: 
   ┌─ features/structs.fe:17:16
   │
17 │         assert self.my_house.price == 1
   │                ^^^^^^^^^^^^^^^^^^^ u256: Storage { nonce: Some(0) } => Some(Value)

note: 
   ┌─ features/structs.fe:17:39
   │
17 │         assert self.my_house.price == 1
   │                                       ^ u256: Value => None

note: 
   ┌─ features/structs.fe:17:16
   │
17 │         assert self.my_house.price == 1
   │                ^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value => None

note: 
   ┌─ features/structs.fe:18:16
   │
18 │         assert self.my_house.size == 2
   │                ^^^^^^^^^^^^^ House: Storage { nonce: Some(0) } => None

note: 
   ┌─ features/structs.fe:18:16
   │
18 │         assert self.my_house.size == 2
   │                ^^^^^^^^^^^^^^^^^^ u256: Storage { nonce: Some(0) } => Some(Value)

note: 
   ┌─ features/structs.fe:18:38
   │
18 │         assert self.my_house.size == 2
   │                                      ^ u256: Value => None

note: 
   ┌─ features/structs.fe:18:16
   │
18 │         assert self.my_house.size == 2
   │                ^^^^^^^^^^^^^^^^^^^^^^^ bool: Value => None

note: 
   ┌─ features/structs.fe:19:16
   │
19 │         assert self.my_house.rooms == u8(5)
   │                ^^^^^^^^^^^^^ House: Storage { nonce: Some(0) } => None

note: 
   ┌─ features/structs.fe:19:16
   │
19 │         assert self.my_house.rooms == u8(5)
   │                ^^^^^^^^^^^^^^^^^^^ u8: Storage { nonce: Some(0) } => Some(Value)

note: 
   ┌─ features/structs.fe:19:42
   │
19 │         assert self.my_house.rooms == u8(5)
   │                                          ^ u8: Value => None

note: 
   ┌─ features/structs.fe:19:39
   │
19 │         assert self.my_house.rooms == u8(5)
   │                                       ^^^^^ u8: Value => None

note: 
   ┌─ features/structs.fe:19:16
   │
19 │         assert self.my_house.rooms == u8(5)
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value => None

note: 
   ┌─ features/structs.fe:20:16
   │
20 │         assert self.my_house.vacant == false
   │                ^^^^^^^^^^^^^ House: Storage { nonce: Some(0) } => None

note: 
   ┌─ features/structs.fe:20:16
   │
20 │         assert self.my_house.vacant == false
   │                ^^^^^^^^^^^^^^^^^^^^ bool: Storage { nonce: Some(0) } => Some(Value)

note: 
   ┌─ features/structs.fe:20:40
   │
20 │         assert self.my_house.vacant == false
   │                                        ^^^^^ bool: Value => None

note: 
   ┌─ features/structs.fe:20:16
   │
20 │         assert self.my_house.vacant == false
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value => None

note: 
   ┌─ features/structs.fe:22:9
   │
22 │         self.my_house.size = 50
   │         ^^^^^^^^^^^^^ House: Storage { nonce: Some(0) } => None

note: 
   ┌─ features/structs.fe:22:9
   │
22 │         self.my_house.size = 50
   │         ^^^^^^^^^^^^^^^^^^ u256: Storage { nonce: Some(0) } => None

note: 
   ┌─ features/structs.fe:22:30
   │
22 │         self.my_house.size = 50
   │                              ^^ u256: Value => None

note: 
   ┌─ features/structs.fe:23:16
   │
23 │         assert self.my_house.size == 50
   │                ^^^^^^^^^^^^^ House: Storage { nonce: Some(0) } => None

note: 
   ┌─ features/structs.fe:23:16
   │
23 │         assert self.my_house.size == 50
   │                ^^^^^^^^^^^^^^^^^^ u256: Storage { nonce: Some(0) } => Some(Value)

note: 
   ┌─ features/structs.fe:23:38
   │
23 │         assert self.my_house.size == 50
   │                                      ^^ u256: Value => None

note: 
   ┌─ features/structs.fe:23:16
   │
23 │         assert self.my_house.size == 50
   │                ^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value => None

note: 
   ┌─ features/structs.fe:24:16
   │
24 │         assert self.my_house.price == 1
   │                ^^^^^^^^^^^^^ House: Storage { nonce: Some(0) } => None

note: 
   ┌─ features/structs.fe:24:16
   │
24 │         assert self.my_house.price == 1
   │                ^^^^^^^^^^^^^^^^^^^ u256: Storage { nonce: Some(0) } => Some(Value)

note: 
   ┌─ features/structs.fe:24:39
   │
24 │         assert self.my_house.price == 1
   │                                       ^ u256: Value => None

note: 
   ┌─ features/structs.fe:24:16
   │
24 │         assert self.my_house.price == 1
   │                ^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value => None

note: 
   ┌─ features/structs.fe:25:16
   │
25 │         assert self.my_house.rooms == u8(5)
   │                ^^^^^^^^^^^^^ House: Storage { nonce: Some(0) } => None

note: 
   ┌─ features/structs.fe:25:16
   │
25 │         assert self.my_house.rooms == u8(5)
   │                ^^^^^^^^^^^^^^^^^^^ u8: Storage { nonce: Some(0) } => Some(Value)

note: 
   ┌─ features/structs.fe:25:42
   │
25 │         assert self.my_house.rooms == u8(5)
   │                                          ^ u8: Value => None

note: 
   ┌─ features/structs.fe:25:39
   │
25 │         assert self.my_house.rooms == u8(5)
   │                                       ^^^^^ u8: Value => None

note: 
   ┌─ features/structs.fe:25:16
   │
25 │         assert self.my_house.rooms == u8(5)
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value => None

note: 
   ┌─ features/structs.fe:26:16
   │
26 │         assert self.my_house.vacant == false
   │                ^^^^^^^^^^^^^ House: Storage { nonce: Some(0) } => None

note: 
   ┌─ features/structs.fe:26:16
   │
26 │         assert self.my_house.vacant == false
   │                ^^^^^^^^^^^^^^^^^^^^ bool: Storage { nonce: Some(0) } => Some(Value)

note: 
   ┌─ features/structs.fe:26:40
   │
26 │         assert self.my_house.vacant == false
   │                                        ^^^^^ bool: Value => None

note: 
   ┌─ features/structs.fe:26:16
   │
26 │         assert self.my_house.vacant == false
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value => None

note: 
   ┌─ features/structs.fe:28:9
   │
28 │         self.my_house.price = 1000
   │         ^^^^^^^^^^^^^ House: Storage { nonce: Some(0) } => None

note: 
   ┌─ features/structs.fe:28:9
   │
28 │         self.my_house.price = 1000
   │         ^^^^^^^^^^^^^^^^^^^ u256: Storage { nonce: Some(0) } => None

note: 
   ┌─ features/structs.fe:28:31
   │
28 │         self.my_house.price = 1000
   │                               ^^^^ u256: Value => None

note: 
   ┌─ features/structs.fe:29:16
   │
29 │         assert self.my_house.size == 50
   │                ^^^^^^^^^^^^^ House: Storage { nonce: Some(0) } => None

note: 
   ┌─ features/structs.fe:29:16
   │
29 │         assert self.my_house.size == 50
   │                ^^^^^^^^^^^^^^^^^^ u256: Storage { nonce: Some(0) } => Some(Value)

note: 
   ┌─ features/structs.fe:29:38
   │
29 │         assert self.my_house.size == 50
   │                                      ^^ u256: Value => None

note: 
   ┌─ features/structs.fe:29:16
   │
29 │         assert self.my_house.size == 50
   │                ^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value => None

note: 
   ┌─ features/structs.fe:30:16
   │
30 │         assert self.my_house.price == 1000
   │                ^^^^^^^^^^^^^ House: Storage { nonce: Some(0) } => None

note: 
   ┌─ features/structs.fe:30:16
   │
30 │         assert self.my_house.price == 1000
   │                ^^^^^^^^^^^^^^^^^^^ u256: Storage { nonce: Some(0) } => Some(Value)

note: 
   ┌─ features/structs.fe:30:39
   │
30 │         assert self.my_house.price == 1000
   │                                       ^^^^ u256: Value => None

note: 
   ┌─ features/structs.fe:30:16
   │
30 │         assert self.my_house.price == 1000
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value => None

note: 
   ┌─ features/structs.fe:31:16
   │
31 │         assert self.my_house.rooms == u8(5)
   │                ^^^^^^^^^^^^^ House: Storage { nonce: Some(0) } => None

note: 
   ┌─ features/structs.fe:31:16
   │
31 │         assert self.my_house.rooms == u8(5)
   │                ^^^^^^^^^^^^^^^^^^^ u8: Storage { nonce: Some(0) } => Some(Value)

note: 
   ┌─ features/structs.fe:31:42
   │
31 │         assert self.my_house.rooms == u8(5)
   │                                          ^ u8: Value => None

note: 
   ┌─ features/structs.fe:31:39
   │
31 │         assert self.my_house.rooms == u8(5)
   │                                       ^^^^^ u8: Value => None

note: 
   ┌─ features/structs.fe:31:16
   │
31 │         assert self.my_house.rooms == u8(5)
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value => None

note: 
   ┌─ features/structs.fe:32:16
   │
32 │         assert self.my_house.vacant == false
   │                ^^^^^^^^^^^^^ House: Storage { nonce: Some(0) } => None

note: 
   ┌─ features/structs.fe:32:16
   │
32 │         assert self.my_house.vacant == false
   │                ^^^^^^^^^^^^^^^^^^^^ bool: Storage { nonce: Some(0) } => Some(Value)

note: 
   ┌─ features/structs.fe:32:40
   │
32 │         assert self.my_house.vacant == false
   │                                        ^^^^^ bool: Value => None

note: 
   ┌─ features/structs.fe:32:16
   │
32 │         assert self.my_house.vacant == false
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value => None

note: 
   ┌─ features/structs.fe:33:9
   │
33 │         self.my_house.vacant = true
   │         ^^^^^^^^^^^^^ House: Storage { nonce: Some(0) } => None

note: 
   ┌─ features/structs.fe:33:9
   │
33 │         self.my_house.vacant = true
   │         ^^^^^^^^^^^^^^^^^^^^ bool: Storage { nonce: Some(0) } => None

note: 
   ┌─ features/structs.fe:33:32
   │
33 │         self.my_house.vacant = true
   │                                ^^^^ bool: Value => None

note: 
   ┌─ features/structs.fe:34:16
   │
34 │         assert self.my_house.size == 50
   │                ^^^^^^^^^^^^^ House: Storage { nonce: Some(0) } => None

note: 
   ┌─ features/structs.fe:34:16
   │
34 │         assert self.my_house.size == 50
   │                ^^^^^^^^^^^^^^^^^^ u256: Storage { nonce: Some(0) } => Some(Value)

note: 
   ┌─ features/structs.fe:34:38
   │
34 │         assert self.my_house.size == 50
   │                                      ^^ u256: Value => None

note: 
   ┌─ features/structs.fe:34:16
   │
34 │         assert self.my_house.size == 50
   │                ^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value => None

note: 
   ┌─ features/structs.fe:35:16
   │
35 │         assert self.my_house.price == 1000
   │                ^^^^^^^^^^^^^ House: Storage { nonce: Some(0) } => None

note: 
   ┌─ features/structs.fe:35:16
   │
35 │         assert self.my_house.price == 1000
   │                ^^^^^^^^^^^^^^^^^^^ u256: Storage { nonce: Some(0) } => Some(Value)

note: 
   ┌─ features/structs.fe:35:39
   │
35 │         assert self.my_house.price == 1000
   │                                       ^^^^ u256: Value => None

note: 
   ┌─ features/structs.fe:35:16
   │
35 │         assert self.my_house.price == 1000
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value => None

note: 
   ┌─ features/structs.fe:36:16
   │
36 │         assert self.my_house.rooms == u8(5)
   │                ^^^^^^^^^^^^^ House: Storage { nonce: Some(0) } => None

note: 
   ┌─ features/structs.fe:36:16
   │
36 │         assert self.my_house.rooms == u8(5)
   │                ^^^^^^^^^^^^^^^^^^^ u8: Storage { nonce: Some(0) } => Some(Value)

note: 
   ┌─ features/structs.fe:36:42
   │
36 │         assert self.my_house.rooms == u8(5)
   │                                          ^ u8: Value => None

note: 
   ┌─ features/structs.fe:36:39
   │
36 │         assert self.my_house.rooms == u8(5)
   │                                       ^^^^^ u8: Value => None

note: 
   ┌─ features/structs.fe:36:16
   │
36 │         assert self.my_house.rooms == u8(5)
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value => None

note: 
   ┌─ features/structs.fe:37:16
   │
37 │         assert self.my_house.vacant
   │                ^^^^^^^^^^^^^ House: Storage { nonce: Some(0) } => None

note: 
   ┌─ features/structs.fe:37:16
   │
37 │         assert self.my_house.vacant
   │                ^^^^^^^^^^^^^^^^^^^^ bool: Storage { nonce: Some(0) } => Some(Value)

note: 
   ┌─ features/structs.fe:38:9
   │
38 │         self.my_house.rooms = u8(100)
   │         ^^^^^^^^^^^^^ House: Storage { nonce: Some(0) } => None

note: 
   ┌─ features/structs.fe:38:9
   │
38 │         self.my_house.rooms = u8(100)
   │         ^^^^^^^^^^^^^^^^^^^ u8: Storage { nonce: Some(0) } => None

note: 
   ┌─ features/structs.fe:38:34
   │
38 │         self.my_house.rooms = u8(100)
   │                                  ^^^ u8: Value => None

note: 
   ┌─ features/structs.fe:38:31
   │
38 │         self.my_house.rooms = u8(100)
   │                               ^^^^^^^ u8: Value => None

note: 
   ┌─ features/structs.fe:39:16
   │
39 │         assert self.my_house.size == 50
   │                ^^^^^^^^^^^^^ House: Storage { nonce: Some(0) } => None

note: 
   ┌─ features/structs.fe:39:16
   │
39 │         assert self.my_house.size == 50
   │                ^^^^^^^^^^^^^^^^^^ u256: Storage { nonce: Some(0) } => Some(Value)

note: 
   ┌─ features/structs.fe:39:38
   │
39 │         assert self.my_house.size == 50
   │                                      ^^ u256: Value => None

note: 
   ┌─ features/structs.fe:39:16
   │
39 │         assert self.my_house.size == 50
   │                ^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value => None

note: 
   ┌─ features/structs.fe:40:16
   │
40 │         assert self.my_house.price == 1000
   │                ^^^^^^^^^^^^^ House: Storage { nonce: Some(0) } => None

note: 
   ┌─ features/structs.fe:40:16
   │
40 │         assert self.my_house.price == 1000
   │                ^^^^^^^^^^^^^^^^^^^ u256: Storage { nonce: Some(0) } => Some(Value)

note: 
   ┌─ features/structs.fe:40:39
   │
40 │         assert self.my_house.price == 1000
   │                                       ^^^^ u256: Value => None

note: 
   ┌─ features/structs.fe:40:16
   │
40 │         assert self.my_house.price == 1000
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value => None

note: 
   ┌─ features/structs.fe:41:16
   │
41 │         assert self.my_house.rooms == u8(100)
   │                ^^^^^^^^^^^^^ House: Storage { nonce: Some(0) } => None

note: 
   ┌─ features/structs.fe:41:16
   │
41 │         assert self.my_house.rooms == u8(100)
   │                ^^^^^^^^^^^^^^^^^^^ u8: Storage { nonce: Some(0) } => Some(Value)

note: 
   ┌─ features/structs.fe:41:42
   │
41 │         assert self.my_house.rooms == u8(100)
   │                                          ^^^ u8: Value => None

note: 
   ┌─ features/structs.fe:41:39
   │
41 │         assert self.my_house.rooms == u8(100)
   │                                       ^^^^^^^ u8: Value => None

note: 
   ┌─ features/structs.fe:41:16
   │
41 │         assert self.my_house.rooms == u8(100)
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value => None

note: 
   ┌─ features/structs.fe:42:16
   │
42 │         assert self.my_house.vacant
   │                ^^^^^^^^^^^^^ House: Storage { nonce: Some(0) } => None

note: 
   ┌─ features/structs.fe:42:16
   │
42 │         assert self.my_house.vacant
   │                ^^^^^^^^^^^^^^^^^^^^ bool: Storage { nonce: Some(0) } => Some(Value)

note: 
   ┌─ features/structs.fe:46:19
   │
46 │             price=300,
   │                   ^^^ u256: Value => None

note: 
   ┌─ features/structs.fe:47:18
   │
47 │             size=500,
   │                  ^^^ u256: Value => None

note: 
   ┌─ features/structs.fe:48:22
   │
48 │             rooms=u8(20),
   │                      ^^ u8: Value => None

note: 
   ┌─ features/structs.fe:48:19
   │
48 │             rooms=u8(20),
   │                   ^^^^^^ u8: Value => None

note: 
   ┌─ features/structs.fe:49:20
   │
49 │             vacant=true
   │                    ^^^^ bool: Value => None

note: 
   ┌─ features/structs.fe:45:31
   │  
45 │           let building: House = House(
   │ ╭───────────────────────────────^
46 │ │             price=300,
47 │ │             size=500,
48 │ │             rooms=u8(20),
49 │ │             vacant=true
50 │ │         )
   │ ╰─────────^ House: Memory => None

note: 
   ┌─ features/structs.fe:51:16
   │
51 │         assert building.size == 500
   │                ^^^^^^^^ House: Memory => None

note: 
   ┌─ features/structs.fe:51:16
   │
51 │         assert building.size == 500
   │                ^^^^^^^^^^^^^ u256: Memory => Some(Value)

note: 
   ┌─ features/structs.fe:51:33
   │
51 │         assert building.size == 500
   │                                 ^^^ u256: Value => None

note: 
   ┌─ features/structs.fe:51:16
   │
51 │         assert building.size == 500
   │                ^^^^^^^^^^^^^^^^^^^^ bool: Value => None

note: 
   ┌─ features/structs.fe:52:16
   │
52 │         assert building.price == 300
   │                ^^^^^^^^ House: Memory => None

note: 
   ┌─ features/structs.fe:52:16
   │
52 │         assert building.price == 300
   │                ^^^^^^^^^^^^^^ u256: Memory => Some(Value)

note: 
   ┌─ features/structs.fe:52:34
   │
52 │         assert building.price == 300
   │                                  ^^^ u256: Value => None

note: 
   ┌─ features/structs.fe:52:16
   │
52 │         assert building.price == 300
   │                ^^^^^^^^^^^^^^^^^^^^^ bool: Value => None

note: 
   ┌─ features/structs.fe:53:16
   │
53 │         assert building.rooms == u8(20)
   │                ^^^^^^^^ House: Memory => None

note: 
   ┌─ features/structs.fe:53:16
   │
53 │         assert building.rooms == u8(20)
   │                ^^^^^^^^^^^^^^ u8: Memory => Some(Value)

note: 
   ┌─ features/structs.fe:53:37
   │
53 │         assert building.rooms == u8(20)
   │                                     ^^ u8: Value => None

note: 
   ┌─ features/structs.fe:53:34
   │
53 │         assert building.rooms == u8(20)
   │                                  ^^^^^^ u8: Value => None

note: 
   ┌─ features/structs.fe:53:16
   │
53 │         assert building.rooms == u8(20)
   │                ^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value => None

note: 
   ┌─ features/structs.fe:54:16
   │
54 │         assert building.vacant
   │                ^^^^^^^^ House: Memory => None

note: 
   ┌─ features/structs.fe:54:16
   │
54 │         assert building.vacant
   │                ^^^^^^^^^^^^^^^ bool: Memory => Some(Value)

note: 
   ┌─ features/structs.fe:56:9
   │
56 │         building.vacant = false
   │         ^^^^^^^^ House: Memory => None

note: 
   ┌─ features/structs.fe:56:9
   │
56 │         building.vacant = false
   │         ^^^^^^^^^^^^^^^ bool: Memory => None

note: 
   ┌─ features/structs.fe:56:27
   │
56 │         building.vacant = false
   │                           ^^^^^ bool: Value => None

note: 
   ┌─ features/structs.fe:57:9
   │
57 │         building.price = 1
   │         ^^^^^^^^ House: Memory => None

note: 
   ┌─ features/structs.fe:57:9
   │
57 │         building.price = 1
   │         ^^^^^^^^^^^^^^ u256: Memory => None

note: 
   ┌─ features/structs.fe:57:26
   │
57 │         building.price = 1
   │                          ^ u256: Value => None

note: 
   ┌─ features/structs.fe:58:9
   │
58 │         building.size = 2
   │         ^^^^^^^^ House: Memory => None

note: 
   ┌─ features/structs.fe:58:9
   │
58 │         building.size = 2
   │         ^^^^^^^^^^^^^ u256: Memory => None

note: 
   ┌─ features/structs.fe:58:25
   │
58 │         building.size = 2
   │                         ^ u256: Value => None

note: 
   ┌─ features/structs.fe:59:9
   │
59 │         building.rooms = u8(10)
   │         ^^^^^^^^ House: Memory => None

note: 
   ┌─ features/structs.fe:59:9
   │
59 │         building.rooms = u8(10)
   │         ^^^^^^^^^^^^^^ u8: Memory => None

note: 
   ┌─ features/structs.fe:59:29
   │
59 │         building.rooms = u8(10)
   │                             ^^ u8: Value => None

note: 
   ┌─ features/structs.fe:59:26
   │
59 │         building.rooms = u8(10)
   │                          ^^^^^^ u8: Value => None

note: 
   ┌─ features/structs.fe:61:16
   │
61 │         assert building.vacant == false
   │                ^^^^^^^^ House: Memory => None

note: 
   ┌─ features/structs.fe:61:16
   │
61 │         assert building.vacant == false
   │                ^^^^^^^^^^^^^^^ bool: Memory => Some(Value)

note: 
   ┌─ features/structs.fe:61:35
   │
61 │         assert building.vacant == false
   │                                   ^^^^^ bool: Value => None

note: 
   ┌─ features/structs.fe:61:16
   │
61 │         assert building.vacant == false
   │                ^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value => None

note: 
   ┌─ features/structs.fe:62:16
   │
62 │         assert building.price == 1
   │                ^^^^^^^^ House: Memory => None

note: 
   ┌─ features/structs.fe:62:16
   │
62 │         assert building.price == 1
   │                ^^^^^^^^^^^^^^ u256: Memory => Some(Value)

note: 
   ┌─ features/structs.fe:62:34
   │
62 │         assert building.price == 1
   │                                  ^ u256: Value => None

note: 
   ┌─ features/structs.fe:62:16
   │
62 │         assert building.price == 1
   │                ^^^^^^^^^^^^^^^^^^^ bool: Value => None

note: 
   ┌─ features/structs.fe:63:16
   │
63 │         assert building.size == 2
   │                ^^^^^^^^ House: Memory => None

note: 
   ┌─ features/structs.fe:63:16
   │
63 │         assert building.size == 2
   │                ^^^^^^^^^^^^^ u256: Memory => Some(Value)

note: 
   ┌─ features/structs.fe:63:33
   │
63 │         assert building.size == 2
   │                                 ^ u256: Value => None

note: 
   ┌─ features/structs.fe:63:16
   │
63 │         assert building.size == 2
   │                ^^^^^^^^^^^^^^^^^^ bool: Value => None

note: 
   ┌─ features/structs.fe:64:16
   │
64 │         assert building.rooms == u8(10)
   │                ^^^^^^^^ House: Memory => None

note: 
   ┌─ features/structs.fe:64:16
   │
64 │         assert building.rooms == u8(10)
   │                ^^^^^^^^^^^^^^ u8: Memory => Some(Value)

note: 
   ┌─ features/structs.fe:64:37
   │
64 │         assert building.rooms == u8(10)
   │                                     ^^ u8: Value => None

note: 
   ┌─ features/structs.fe:64:34
   │
64 │         assert building.rooms == u8(10)
   │                                  ^^^^^^ u8: Value => None

note: 
   ┌─ features/structs.fe:64:16
   │
64 │         assert building.rooms == u8(10)
   │                ^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value => None

note: 
   ┌─ features/structs.fe:65:16
   │
65 │         return building.size
   │                ^^^^^^^^ House: Memory => None

note: 
   ┌─ features/structs.fe:65:16
   │
65 │         return building.size
   │                ^^^^^^^^^^^^^ u256: Memory => Some(Value)

note: 
   ┌─ features/structs.fe:69:19
   │
69 │             price=300,
   │                   ^^^ u256: Value => None

note: 
   ┌─ features/structs.fe:70:18
   │
70 │             size=500,
   │                  ^^^ u256: Value => None

note: 
   ┌─ features/structs.fe:71:22
   │
71 │             rooms=u8(20),
   │                      ^^ u8: Value => None

note: 
   ┌─ features/structs.fe:71:19
   │
71 │             rooms=u8(20),
   │                   ^^^^^^ u8: Value => None

note: 
   ┌─ features/structs.fe:72:20
   │
72 │             vacant=true
   │                    ^^^^ bool: Value => None

note: 
   ┌─ features/structs.fe:68:28
   │  
68 │           let house: House = House(
   │ ╭────────────────────────────^
69 │ │             price=300,
70 │ │             size=500,
71 │ │             rooms=u8(20),
72 │ │             vacant=true
73 │ │         )
   │ ╰─────────^ House: Memory => None

note: 
   ┌─ features/structs.fe:74:16
   │
74 │         return house.abi_encode()
   │                ^^^^^ House: Memory => None

note: 
   ┌─ features/structs.fe:74:16
   │
74 │         return house.abi_encode()
   │                ^^^^^^^^^^^^^^^^^^ u8[128]: Memory => None

note: 
   ┌─ features/structs.fe:78:19
   │
78 │             price=300,
   │                   ^^^ u256: Value => None

note: 
   ┌─ features/structs.fe:79:18
   │
79 │             size=500,
   │                  ^^^ u256: Value => None

note: 
   ┌─ features/structs.fe:80:22
   │
80 │             rooms=u8(20),
   │                      ^^ u8: Value => None

note: 
   ┌─ features/structs.fe:80:19
   │
80 │             rooms=u8(20),
   │                   ^^^^^^ u8: Value => None

note: 
   ┌─ features/structs.fe:81:20
   │
81 │             vacant=true
   │                    ^^^^ bool: Value => None

note: 
   ┌─ features/structs.fe:77:28
   │  
77 │           let house: House = House(
   │ ╭────────────────────────────^
78 │ │             price=300,
79 │ │             size=500,
80 │ │             rooms=u8(20),
81 │ │             vacant=true
82 │ │         )
   │ ╰─────────^ House: Memory => None

note: 
   ┌─ features/structs.fe:83:26
   │
83 │         return keccak256(house.abi_encode())
   │                          ^^^^^ House: Memory => None

note: 
   ┌─ features/structs.fe:83:26
   │
83 │         return keccak256(house.abi_encode())
   │                          ^^^^^^^^^^^^^^^^^^ u8[128]: Memory => None

note: 
   ┌─ features/structs.fe:83:16
   │
83 │         return keccak256(house.abi_encode())
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value => None

note: 
   ┌─ features/structs.fe:45:23
   │
45 │         let building: House = House(
   │                       ^^^^^ House

note: 
   ┌─ features/structs.fe:68:20
   │
68 │         let house: House = House(
   │                    ^^^^^ House

note: 
   ┌─ features/structs.fe:77:20
   │
77 │         let house: House = House(
   │                    ^^^^^ House

note: 
   ┌─ features/structs.fe:11:25
   │
11 │         self.my_house = House(
   │                         ^^^^^ attributes hash: 4962363512196753612
   │
   = TypeConstructor {
         typ: Struct(
             Struct {
                 name: "House",
                 id: StructId(
                     0,
                 ),
                 field_count: 4,
             },
         ),
     }

note: 
   ┌─ features/structs.fe:14:19
   │
14 │             rooms=u8(5),
   │                   ^^ attributes hash: 4311289215688173045
   │
   = TypeConstructor {
         typ: Base(
             Numeric(
                 U8,
             ),
         ),
     }

note: 
   ┌─ features/structs.fe:19:39
   │
19 │         assert self.my_house.rooms == u8(5)
   │                                       ^^ attributes hash: 4311289215688173045
   │
   = TypeConstructor {
         typ: Base(
             Numeric(
                 U8,
             ),
         ),
     }

note: 
   ┌─ features/structs.fe:25:39
   │
25 │         assert self.my_house.rooms == u8(5)
   │                                       ^^ attributes hash: 4311289215688173045
   │
   = TypeConstructor {
         typ: Base(
             Numeric(
                 U8,
             ),
         ),
     }

note: 
   ┌─ features/structs.fe:31:39
   │
31 │         assert self.my_house.rooms == u8(5)
   │                                       ^^ attributes hash: 4311289215688173045
   │
   = TypeConstructor {
         typ: Base(
             Numeric(
                 U8,
             ),
         ),
     }

note: 
   ┌─ features/structs.fe:36:39
   │
36 │         assert self.my_house.rooms == u8(5)
   │                                       ^^ attributes hash: 4311289215688173045
   │
   = TypeConstructor {
         typ: Base(
             Numeric(
                 U8,
             ),
         ),
     }

note: 
   ┌─ features/structs.fe:38:31
   │
38 │         self.my_house.rooms = u8(100)
   │                               ^^ attributes hash: 4311289215688173045
   │
   = TypeConstructor {
         typ: Base(
             Numeric(
                 U8,
             ),
         ),
     }

note: 
   ┌─ features/structs.fe:41:39
   │
41 │         assert self.my_house.rooms == u8(100)
   │                                       ^^ attributes hash: 4311289215688173045
   │
   = TypeConstructor {
         typ: Base(
             Numeric(
                 U8,
             ),
         ),
     }

note: 
   ┌─ features/structs.fe:45:31
   │
45 │         let building: House = House(
   │                               ^^^^^ attributes hash: 4962363512196753612
   │
   = TypeConstructor {
         typ: Struct(
             Struct {
                 name: "House",
                 id: StructId(
                     0,
                 ),
                 field_count: 4,
             },
         ),
     }

note: 
   ┌─ features/structs.fe:48:19
   │
48 │             rooms=u8(20),
   │                   ^^ attributes hash: 4311289215688173045
   │
   = TypeConstructor {
         typ: Base(
             Numeric(
                 U8,
             ),
         ),
     }

note: 
   ┌─ features/structs.fe:53:34
   │
53 │         assert building.rooms == u8(20)
   │                                  ^^ attributes hash: 4311289215688173045
   │
   = TypeConstructor {
         typ: Base(
             Numeric(
                 U8,
             ),
         ),
     }

note: 
   ┌─ features/structs.fe:59:26
   │
59 │         building.rooms = u8(10)
   │                          ^^ attributes hash: 4311289215688173045
   │
   = TypeConstructor {
         typ: Base(
             Numeric(
                 U8,
             ),
         ),
     }

note: 
   ┌─ features/structs.fe:64:34
   │
64 │         assert building.rooms == u8(10)
   │                                  ^^ attributes hash: 4311289215688173045
   │
   = TypeConstructor {
         typ: Base(
             Numeric(
                 U8,
             ),
         ),
     }

note: 
   ┌─ features/structs.fe:68:28
   │
68 │         let house: House = House(
   │                            ^^^^^ attributes hash: 4962363512196753612
   │
   = TypeConstructor {
         typ: Struct(
             Struct {
                 name: "House",
                 id: StructId(
                     0,
                 ),
                 field_count: 4,
             },
         ),
     }

note: 
   ┌─ features/structs.fe:71:19
   │
71 │             rooms=u8(20),
   │                   ^^ attributes hash: 4311289215688173045
   │
   = TypeConstructor {
         typ: Base(
             Numeric(
                 U8,
             ),
         ),
     }

note: 
   ┌─ features/structs.fe:74:16
   │
74 │         return house.abi_encode()
   │                ^^^^^^^^^^^^^^^^ attributes hash: 15856680294290209687
   │
   = ValueAttribute

note: 
   ┌─ features/structs.fe:77:28
   │
77 │         let house: House = House(
   │                            ^^^^^ attributes hash: 4962363512196753612
   │
   = TypeConstructor {
         typ: Struct(
             Struct {
                 name: "House",
                 id: StructId(
                     0,
                 ),
                 field_count: 4,
             },
         ),
     }

note: 
   ┌─ features/structs.fe:80:19
   │
80 │             rooms=u8(20),
   │                   ^^ attributes hash: 4311289215688173045
   │
   = TypeConstructor {
         typ: Base(
             Numeric(
                 U8,
             ),
         ),
     }

note: 
   ┌─ features/structs.fe:83:16
   │
83 │         return keccak256(house.abi_encode())
   │                ^^^^^^^^^ attributes hash: 3985281278010092305
   │
   = BuiltinFunction(
         Keccak256,
     )

note: 
   ┌─ features/structs.fe:83:26
   │
83 │         return keccak256(house.abi_encode())
   │                          ^^^^^^^^^^^^^^^^ attributes hash: 15856680294290209687
   │
   = ValueAttribute


